{"version":3,"sources":["assets/guides/guide_right_01b.jpg","assets/guides/guide_left_01.jpg","assets/guides/guide_left_02.jpg","assets/textures/asset_01.jpg","assets/textures/asset_02.jpg","assets/textures/asset_03.jpg","assets/textures/asset_04.jpg","assets/textures/asset_bp2.jpg","assets/textures/asset_looney2.jpg","assets/textures/asset_tmnt2.jpg","assets/layers/layer_01.png","assets/layers/layer_02_multiply.png","assets/layers/layer_03_base.png","assets/layers/sock_mask_left.png","assets/layers/sock_mask_right.png","history.js","lib/GridManager.js","lib/MeshCanvas.js","lib/CanvasDummy.js","lib/CanvasDummyBuilder.js","components/Builder/index.js","components/Preview/index.js","App.js","reportWebVitals.js","index.js"],"names":["createBrowserHistory","GridManager","width","height","rows","columns","rootPositions","positions","this","build","makePoints","x","y","indexes","forEach","index","length","add_or_subtract","new_points","old_points","new_points_01_columns","new_points_02_rows","new_points_03_square","i","gCols","push","getAverage","direction","col_total","pushNew","array1","array2","nextValue","shift","gRows","c","coord","colWidth","rowHeight","make_positions","total","Math","floor","corners","tl","tr","bl","br","square","makeGo","max","squareValue","checks","undefined","props","divisions","amount","pow","center","moveUpperLeft","moveUpperRight","moveLowerRight","moveLowerLeft","double","corner","item","opposite","hypoten","adjacent","moveCommon","mid1","mid2","avg","adjacentPos","hypotenPos","oppositePos","centerPos","array","controlPoints","map","MeshCanvas","image","gridManager","output","document","createElement","id","filler","wireframe","src","refresh","ctx_wireframe","getContext","clearRect","strokeStyle","lineWidth","neighbor","beginPath","upper","moveTo","lineTo","stroke","closePath","r1","s1","t1","r2","s2","t2","r3","s3","t3","parseFloat","a","b","showFiller","canvi","img","gm","w","h","subwidth","subheight","target","rewind_amount","skip_amount","canvas","ctx","offset","console","log","c1","c2","c3","c4","rootX","rootY","x1","y1","x2","y2","x3","y3","x4","y4","xn","linearSolution","yn","save","setTransform","fillStyle","fill","clip","drawImage","restore","xm","ym","meshify","updateMeshLines","updateQuantity","CanvasDummy","data","mesh","image_width","image_height","values","parent","initMesh","init","meshCanvas","iterations","updateDot","prev","canvas_data","right_sock","left_sock_01","left_sock_02","meshables","dummies","obj","dummy","addMesh","filter","Builder","React","forwardRef","ref","sourceBitmapData","dispatch","guideRight","require","default","guideLeft01","guideLeft02","images","useRef","current","bitmapData","Array","useState","imageArray","dummyIndex","setDummyIndex","setDummy","opacity","setOpacity","transparency","setTransparency","showDots","setShowDots","wireframeOpacity","setWireframeOpacity","setIterations","prevIteration","setControlPoints","setForceUpdate","canvasHolder","dotsHolder","updateIterations","next","min","cols","error","updateControlPoints","cols1","viewPoints","isControl","clear","point","useEffect","completed","callback","url","Image","onload","CanvasDummyBuilder","childNodes","removeChild","appendChild","style","setTimeout","forceUpdate","className","draggable","alt","onMouseDown","event","Infinity","left","top","ignore","onClick","next_opacity","random","attribute","Preview","thumbs","layers","canvasRef","selected","setSelected","globalCompositeOperation","CanvasColoring","tint","color","saturation","contrast","Actions","App","bodyRef","setBody","dotIndexRef","boundingRect","mouseDownPos","iterationsRef","assets","assetData","layerData","setSourceBitmapData","gridTarget","handleMouseEvent","preventDefault","stopPropagation","type","addEventListener","getBoundingClientRect","pageX","pageY","removeEventListener","targetMeshable","documentElement","scrollTop","getElementsByTagName","history","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.3c4a5844.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/guide_right_01b.ca76daf9.jpg\";","export default __webpack_public_path__ + \"static/media/guide_left_01.7e7d44cd.jpg\";","export default __webpack_public_path__ + \"static/media/guide_left_02.09825351.jpg\";","export default __webpack_public_path__ + \"static/media/asset_01.dae64ad5.jpg\";","export default __webpack_public_path__ + \"static/media/asset_02.a1965573.jpg\";","export default __webpack_public_path__ + \"static/media/asset_03.885eb998.jpg\";","export default __webpack_public_path__ + \"static/media/asset_04.7b80fa12.jpg\";","export default __webpack_public_path__ + \"static/media/asset_bp2.0245ee45.jpg\";","export default __webpack_public_path__ + \"static/media/asset_looney2.11c89469.jpg\";","export default __webpack_public_path__ + \"static/media/asset_tmnt2.c93b4bf5.jpg\";","export default __webpack_public_path__ + \"static/media/layer_01.0eaae9e9.png\";","export default __webpack_public_path__ + \"static/media/layer_02_multiply.f88cdf8f.png\";","export default __webpack_public_path__ + \"static/media/layer_03_base.caa520d5.png\";","export default __webpack_public_path__ + \"static/media/sock_mask_left.69764d68.png\";","export default __webpack_public_path__ + \"static/media/sock_mask_right.7a9dd145.png\";","import { createBrowserHistory } from \"history\"\n\nexport default createBrowserHistory()\n","export default class GridManager {\n  init({ width, height, rows, columns, rootPositions, positions }) {\n    if (!this.build) {\n      this.build = true\n      this.width = width\n      this.height = height\n      this.rows = rows\n      this.columns = columns\n\n      this.makePoints(rootPositions, positions)\n    }\n  }\n\n  getAverage(...indexes) {\n    let x = 0\n    let y = 0\n    indexes.forEach(index => {\n      x += this.positions[index].x\n      y += this.positions[index].y\n    })\n    x /= indexes.length\n    y /= indexes.length\n\n    return { x, y }\n  }\n\n  updateQuantity(add_or_subtract) {\n    let new_points = []\n    switch (add_or_subtract) {\n      case \"+\":\n      case \"add\":\n        const old_points = this.positions\n        const new_points_01_columns = []\n        const new_points_02_rows = []\n        const new_points_03_square = []\n\n        for (let i = 0; i < old_points.length; i++) {\n          if (i + this.gCols < old_points.length) new_points_02_rows.push(this.getAverage(i, i + this.gCols))\n          if (i % this.gCols !== this.columns) {\n            if (i + 1 < old_points.length) new_points_01_columns.push(this.getAverage(i, i + 1))\n            if (i + this.gCols < old_points.length)\n              new_points_03_square.push(this.getAverage(i, i + 1, i + this.gCols, i + this.gCols + 1))\n          }\n        }\n\n        let direction = \"across\"\n        const col_total = this.columns + this.gCols\n        function pushNew(array1, array2, nextValue) {\n          for (let i = 0; i < col_total; i++) {\n            if (i % 2) {\n              new_points.push(array1.shift())\n            } else {\n              new_points.push(array2.shift())\n            }\n\n            new_points[new_points.length - 1].i = new_points.length - 1\n            if (i === col_total - 1) direction = nextValue\n          }\n        }\n        while (\n          old_points.length +\n          new_points_01_columns.length +\n          new_points_02_rows.length +\n          new_points_03_square.length\n        ) {\n          switch (direction) {\n            case \"across\":\n              pushNew(new_points_01_columns, old_points, \"middle\")\n              break\n            case \"middle\":\n              pushNew(new_points_03_square, new_points_02_rows, \"across\")\n\n              break\n            default:\n              break\n          }\n        }\n\n        this.columns *= 2\n        this.rows *= 2\n        break\n      case \"-\":\n      case \"subtract\":\n        let modulo = 1\n\n        for (let i = 0; i < this.gRows; i += 2) {\n          for (let c = 0; c < this.gCols; c += 2) {\n            const index = i * this.gCols + c\n            let coord = this.positions[index]\n            coord.i = index\n            new_points.push(coord)\n          }\n        }\n        // new_points = this.positions.filter((coord, i) => {\n        //   if (i % this.gCols === 0) modulo = +!modulo\n        //   return i % 2 === modulo\n        // })\n\n        // console.log(this.positions)\n        // console.log(new_points)\n\n        this.columns /= 2\n        this.rows /= 2\n        break\n      default:\n        break\n    }\n\n    this.gCols = this.columns + 1\n    this.gRows = this.rows + 1\n\n    this.positions = new_points\n\n    this.makePoints()\n  }\n\n  makePoints(rootPositions, positions) {\n    const colWidth = this.width / this.columns\n    const rowHeight = this.height / this.rows\n\n    this.gCols = this.columns + 1\n    this.gRows = this.rows + 1\n\n    if (positions && rootPositions) {\n      this.positions = positions\n      this.rootPositions = rootPositions\n    } else {\n      const total = this.gRows * this.gCols\n      this.rootPositions = []\n      let make_positions\n      if (!this.positions) {\n        this.positions = []\n        make_positions = true\n      }\n      if (!this.rootPositions.length) {\n        for (let i = 0; i < total; i++) {\n          if (make_positions)\n            this.positions.push({\n              x: (i % this.gCols) * colWidth,\n              y: Math.floor(i / this.gCols) * rowHeight,\n              i,\n            })\n          this.rootPositions.push({\n            x: (i % this.gCols) * colWidth,\n            y: Math.floor(i / this.gCols) * rowHeight,\n            i,\n          })\n        }\n      }\n    }\n    this.corners = {\n      tl: 0,\n      tr: this.rows,\n      bl: this.gCols * this.rows,\n      br: this.gCols * this.rows + this.rows,\n    }\n  }\n\n  updateDot(i, x, y, square) {\n    this.positions[i] = {\n      x,\n      y,\n      i,\n    }\n\n    this.makeGo(i, square, this.columns / Math.max(1, square / 2))\n  }\n\n  makeGo(index, squareValue, checks) {\n    if (checks <= 1 || index === null || index === undefined || !(index >= 0)) return\n\n    const props = {\n      divisions: this.columns / squareValue,\n      amount: Math.pow(this.columns, 2) / squareValue,\n      center: index,\n    }\n    const corners = [\n      this.moveUpperLeft(props),\n      this.moveUpperRight(props),\n      this.moveLowerRight(props),\n      this.moveLowerLeft(props),\n    ]\n\n    const double = squareValue * 2\n    corners.forEach(corner => {\n      for (let item in corner) this.makeGo(corner[item], double, checks / 2)\n    })\n  }\n\n  moveLowerLeft({ divisions, amount, center }) {\n    if (center % this.gCols === 0) return\n\n    // to the left or the right\n    let opposite = center - divisions\n    // across in a corner\n    let hypoten = center + amount\n    // above or below\n    let adjacent = hypoten + divisions\n\n    return this.moveCommon({ center, opposite, adjacent, hypoten })\n  }\n  moveLowerRight({ divisions, amount, center }) {\n    if ((center + 1) % this.gCols === 0) return\n\n    // to the left or the right\n    let opposite = center + divisions\n    // above or below\n    let adjacent = opposite + amount\n    // across in a corner\n    let hypoten = adjacent + divisions\n\n    return this.moveCommon({ center, opposite, adjacent, hypoten })\n  }\n  moveUpperRight({ divisions, amount, center }) {\n    if ((center + 1) % this.gCols === 0) return\n    // to the left or the right\n    let opposite = center + divisions\n    // across in a corner\n    let hypoten = center - amount\n    // above or below\n    let adjacent = hypoten - divisions\n\n    return this.moveCommon({ center, opposite, adjacent, hypoten })\n  }\n\n  moveUpperLeft({ divisions, amount, center }) {\n    if (center % this.gCols === 0) return\n\n    // to the left or the right\n    let opposite = center - divisions\n    // above or below\n    let adjacent = opposite - amount\n    // across in a corner\n    let hypoten = adjacent - divisions\n\n    return this.moveCommon({ center, opposite, adjacent, hypoten })\n  }\n\n  moveCommon({ center, opposite, adjacent, hypoten }) {\n    let mid1 = (center + adjacent) / 2\n    let mid2 = (center + opposite) / 2\n\n    let avg = (adjacent + opposite) / 2\n\n    let adjacentPos = this.positions[adjacent]\n    let hypotenPos = this.positions[hypoten]\n    let oppositePos = this.positions[opposite]\n\n    let centerPos = this.positions[center]\n    if (\n      adjacentPos &&\n      centerPos &&\n      hypotenPos &&\n      oppositePos &&\n      this.positions[avg] &&\n      this.positions[mid1] &&\n      this.positions[mid2]\n    ) {\n      this.positions[avg] = {\n        x: (adjacentPos.x + oppositePos.x + hypotenPos.x + centerPos.x) / 4,\n        y: (adjacentPos.y + oppositePos.y + hypotenPos.y + centerPos.y) / 4,\n        i: avg,\n      }\n\n      this.positions[mid1] = {\n        x: (centerPos.x + adjacentPos.x) / 2,\n        y: (centerPos.y + adjacentPos.y) / 2,\n        i: mid1,\n      }\n      this.positions[mid2] = {\n        x: (centerPos.x + oppositePos.x) / 2,\n        y: (centerPos.y + oppositePos.y) / 2,\n        i: mid2,\n      }\n    }\n\n    return { avg, mid1, mid2, center }\n  }\n\n  setControlPoints(array) {\n    this.controlPoints = array.map(index => index)\n  }\n}\n","import { MathUtils } from \"@ff0000-ad-tech/ad-utils\"\nimport { getAnglePoint } from \"@ff0000-ad-tech/ad-utils/lib/MathUtils\"\n\nconst getAverage = (...numbers) => {\n  let number = 0\n  numbers.forEach(num => (number += num))\n  return number / numbers.length\n}\n\nconst averagePoints = (...points) => {\n  let newPoint = { x: 0, y: 0 }\n  points.forEach(point => {\n    newPoint.x += point.x\n    newPoint.y += point.y\n  })\n  return {\n    x: newPoint.x / points.length,\n    y: newPoint.y / points.length,\n  }\n}\n\nexport default class MeshCanvas {\n  init(width, height, image, gridManager) {\n    this.output = document.createElement(\"canvas\")\n    this.output.id = `output`\n\n    this.filler = document.createElement(\"canvas\")\n    this.filler.id = `filler`\n\n    this.wireframe = document.createElement(\"canvas\")\n    this.wireframe.id = `wireframe`\n\n    this.output.width = width\n    this.output.height = height\n\n    this.filler.width = width\n    this.filler.height = height\n\n    this.wireframe.width = width\n    this.wireframe.height = height\n\n    this.src = image\n\n    this.gridManager = gridManager\n\n    this.refresh()\n  }\n\n  updateMeshLines() {\n    // update the mesh lines\n    let ctx_wireframe = this.wireframe.getContext(\"2d\")\n\n    ctx_wireframe.clearRect(0, 0, this.wireframe.width, this.wireframe.height)\n    ctx_wireframe.strokeStyle = \"red\"\n    ctx_wireframe.lineWidth = 0.5\n    for (let i = 0; i < this.gridManager.positions.length; i++) {\n      const coord = this.gridManager.positions[i]\n      let neighbor = this.gridManager.positions[i + 1]\n      if (i && (i + 1) % this.gridManager.gCols === 0) neighbor = null\n      ctx_wireframe.beginPath()\n      if (i >= this.gridManager.gCols) {\n        const upper = this.gridManager.positions[i - this.gridManager.columns - 1]\n        ctx_wireframe.moveTo(upper.x, upper.y)\n        ctx_wireframe.lineTo(coord.x, coord.y)\n      } else {\n        ctx_wireframe.moveTo(coord.x, coord.y)\n      }\n      if (neighbor) ctx_wireframe.lineTo(neighbor.x, neighbor.y)\n      ctx_wireframe.stroke()\n      ctx_wireframe.closePath()\n    }\n\n    // ctx_wireframe.strokeStyle = \"orange\"\n    // ctx_wireframe.lineWidth = 0.5\n    // for (let i = 0; i < this.gridManager.positions.length; i++) {\n    //   if (i % this.gridManager.gCols === 0) continue\n\n    //   const coord = this.gridManager.positions[i]\n    //   let neighbor = this.gridManager.positions[i + this.gridManager.columns]\n\n    //   if (!neighbor) break\n\n    //   ctx_wireframe.beginPath()\n    //   ctx_wireframe.moveTo(coord.x, coord.y)\n    //   ctx_wireframe.lineTo(neighbor.x, neighbor.y)\n\n    //   ctx_wireframe.stroke()\n    //   ctx_wireframe.closePath()\n    // }\n\n    // console.warn(this.gridManager.controlPoints)\n    // if (this.gridManager.controlPoints) {\n    // }\n  }\n\n  linearSolution(r1, s1, t1, r2, s2, t2, r3, s3, t3) {\n    // make them all floats\n    r1 = parseFloat(r1)\n    s1 = parseFloat(s1)\n    t1 = parseFloat(t1)\n    r2 = parseFloat(r2)\n    s2 = parseFloat(s2)\n    t2 = parseFloat(t2)\n    r3 = parseFloat(r3)\n    s3 = parseFloat(s3)\n    t3 = parseFloat(t3)\n\n    let a = ((t2 - t3) * (s1 - s2) - (t1 - t2) * (s2 - s3)) / ((r2 - r3) * (s1 - s2) - (r1 - r2) * (s2 - s3))\n    let b = ((t2 - t3) * (r1 - r2) - (t1 - t2) * (r2 - r3)) / ((s2 - s3) * (r1 - r2) - (s1 - s2) * (r2 - r3))\n    let c = t1 - r1 * a - s1 * b\n\n    return [a, b, c]\n  }\n\n  meshify(showFiller = false) {\n    const canvi = [this.output]\n    if (showFiller) canvi.push(this.filler)\n    // console.log(`%c ${showFiller}`, \"color: black; background-color: cyan; font-style: italic; padding: 2px;\")\n    let img = this.src\n\n    let gm = this.gridManager\n    let { columns, rows } = gm\n    let w = canvi[0].width\n    let h = canvi[0].height\n\n    let subwidth = img.width / columns\n    let subheight = img.height / rows\n\n    const target = gm.positions.length - 1 - columns - 2\n    const rewind_amount = columns + 1\n    const skip_amount = rewind_amount * rows - 1\n\n    canvi.forEach((canvas, c) => {\n      let ctx = canvas.getContext(\"2d\")\n\n      const offset = c * 4\n\n      ctx.clearRect(0, 0, w, h)\n      // render the images\n\n      for (let i = target; i > -1; i -= rewind_amount) {\n        // console.log(c, i)\n        console.log()\n        const c1 = gm.positions[i]\n        const c2 = gm.positions[i + 1]\n        const c3 = gm.positions[i + 1 + columns]\n        const c4 = gm.positions[i + 2 + columns]\n\n        let { x: rootX, y: rootY } = gm.rootPositions[i]\n\n        let x1 = c1.x + offset\n        let y1 = c1.y + offset\n        let x2 = c2.x + offset\n        let y2 = c2.y + offset\n        let x3 = c3.x + offset\n        let y3 = c3.y + offset\n        let x4 = c4.x + offset\n        let y4 = c4.y + offset\n\n        // the bottom-right face\n        let xn = this.linearSolution(subwidth, subheight, x4, subwidth, 0, x2, 0, subheight, x3)\n        let yn = this.linearSolution(subwidth, subheight, y4, subwidth, 0, y2, 0, subheight, y3)\n\n        ctx.save()\n        ctx.setTransform(xn[0], yn[0], xn[1], yn[1], xn[2], yn[2])\n        ctx.beginPath()\n        ctx.moveTo(subwidth, subheight)\n        ctx.lineTo(subwidth, 0)\n        ctx.lineTo(0, subheight)\n        ctx.closePath()\n        ctx.fillStyle = \"transparent\"\n        // ctx.fillStyle = \"black\"\n        ctx.fill()\n        ctx.clip()\n        ctx.drawImage(img, rootX, rootY, subwidth, subheight, 0, 0, subwidth, subheight)\n\n        ctx.restore()\n\n        // the top-left face\n        let xm = this.linearSolution(0, 0, x1, subwidth, 0, x2, 0, subheight, x3)\n        let ym = this.linearSolution(0, 0, y1, subwidth, 0, y2, 0, subheight, y3)\n\n        ctx.save()\n        ctx.setTransform(xm[0], ym[0], xm[1], ym[1], xm[2], ym[2])\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(subwidth, 0)\n        ctx.lineTo(0, subheight)\n        ctx.closePath()\n        ctx.fillStyle = \"transparent\"\n        // ctx.fillStyle = \"black\"\n        ctx.fill()\n        ctx.clip()\n        ctx.drawImage(img, rootX, rootY, subwidth, subheight, 0, 0, subwidth, subheight)\n        ctx.restore()\n\n        if (i && i - rewind_amount < 0) i += skip_amount\n      }\n    })\n  }\n\n  refresh(showFiller = false) {\n    this.meshify(showFiller)\n    this.updateMeshLines()\n  }\n\n  updateQuantity(add_or_subtract) {\n    this.gridManager.updateQuantity(add_or_subtract)\n  }\n}\n","import GridManager from \"./GridManager\"\nimport MeshCanvas from \"./MeshCanvas\"\n\nexport default class CanvasDummy {\n  init(props) {\n    const { width, height, image, id, data, mesh } = props\n\n    const { src, x, y, width: image_width, height: image_height } = image\n\n    this.id = id\n\n    this.values = [src, x || 0, y || 0, image_width || src.width, image_height || src.height]\n    this.parent = src\n\n    if (mesh) {\n      this.initMesh(width, height, data)\n    } else {\n      this.canvas = document.createElement(\"canvas\")\n      this.canvas.id = `dummy_canvas_${id}`\n\n      this.canvas.width = width\n      this.canvas.height = height\n      const ctx = this.canvas.getContext(\"2d\")\n\n      ctx.drawImage(...this.values)\n    }\n\n    // document.getElementsByTagName(\"body\").appendChild(canvas)\n  }\n\n  initMesh(width, height, data) {\n    const gridManager = new GridManager()\n\n    // data = null\n    let thing = true\n    // thing = false\n    if (thing) {\n      data = data || {\n        width: this.parent.width,\n        height: this.parent.height,\n        columns: 2,\n        rows: 2,\n      }\n    } else {\n      data = data || {\n        width: this.parent.width,\n        height: this.parent.height,\n        columns: 4,\n        rows: 4,\n      }\n    }\n\n    gridManager.init(data)\n\n    this.meshCanvas = new MeshCanvas()\n    this.meshCanvas.init(width, height, this.parent, gridManager)\n\n    // this.parentDummy = parentDummy\n  }\n\n  updateQuantity(add_or_subtract) {\n    this.meshCanvas.updateQuantity(add_or_subtract)\n    this.refresh()\n  }\n\n  updateDot(index, x, y, iterations) {\n    this.meshCanvas.gridManager.updateDot(index, x, y, iterations)\n    this.meshCanvas.refresh()\n  }\n\n  refresh(showFiller = false) {\n    if (this.meshCanvas) {\n      this.meshCanvas.refresh(showFiller)\n    } else {\n      let ctx = this.canvas.getContext(\"2d\")\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      ctx.drawImage(...this.values)\n    }\n  }\n}\n","import CanvasDummy from \"./CanvasDummy\"\n\nimport right_sock from \"../data/right_sock.json\"\nimport left_sock_01 from \"../data/left_sock_01.json\"\nimport left_sock_02 from \"../data/left_sock_02.json\"\n\nclass CanvasDummyBuilder {\n  init(src) {\n    const canvas_data = [\n      {\n        id: \"right_sock_source\",\n        width: 294,\n        height: 971,\n        image: {\n          x: -4,\n          y: -2,\n          width: 590,\n          height: 975,\n        },\n      },\n      {\n        id: \"right_sock_target\",\n        width: 1000,\n        height: 1000,\n        image: { src: \"right_sock_source\" },\n        data: right_sock,\n      },\n      {\n        id: \"left_sock_source\",\n        width: 297,\n        height: 974,\n        image: {\n          x: -293,\n          y: -1,\n          width: 590,\n          height: 975,\n        },\n      },\n      {\n        id: \"left_sock_target_01\",\n        width: 287,\n        height: 940,\n        image: {\n          x: -10,\n          y: -34,\n          width: 297,\n          height: 974,\n          src: \"left_sock_source\",\n        },\n        data: left_sock_01,\n      },\n      {\n        id: \"left_sock_target_02\",\n        width: 1000,\n        height: 1000,\n        image: { src: \"left_sock_target_01\" },\n        data: left_sock_02,\n      },\n    ]\n\n    let prev\n    this.meshables = []\n\n    this.dummies = canvas_data.map((obj, i) => {\n      const dummy = new CanvasDummy()\n      obj.image = obj.image || {}\n      if (obj.image.src) {\n      } else {\n      }\n\n      const addMesh = obj.image.src || false\n      obj.image.src = addMesh ? prev : src\n\n      if (addMesh) obj.mesh = addMesh\n\n      dummy.init(obj)\n\n      if (obj.image.src === prev) {\n        this.meshables.push(dummy)\n      }\n\n      prev = dummy.meshCanvas ? dummy.meshCanvas.output : dummy.canvas\n\n      return dummy\n    })\n\n    // throw new Error(\"STOP\")\n  }\n\n  refresh(img) {\n    const non_meshy = this.dummies.filter(dummy => {\n      return !dummy.meshCanvas\n    })\n\n    non_meshy.forEach((dummy, i) => {\n      dummy.values[0] = img\n      dummy.refresh(true)\n    })\n\n    this.meshables.forEach((dummy, i) => {\n      dummy.refresh(true)\n    })\n  }\n}\n\nexport default new CanvasDummyBuilder()\n","import React, { useEffect, useRef, useState } from \"react\"\nimport { traverseTwoPhase } from \"react-dom/test-utils\"\nimport GridManager from \"../../lib/GridManager\"\nimport CanvasDummyBuilder from \"../../lib/CanvasDummyBuilder\"\n\nimport \"./style.scss\"\n\nimport { Actions } from \"../../App\"\n\nconst Builder = React.forwardRef((props, ref) => {\n  const { sourceBitmapData, dispatch } = props\n\n  const guideRight = require(\"../../assets/guides/guide_right_01b.jpg\").default\n  const guideLeft01 = require(\"../../assets/guides/guide_left_01.jpg\").default\n  const guideLeft02 = require(\"../../assets/guides/guide_left_02.jpg\").default\n\n  const images = useRef([guideRight, guideLeft01, guideLeft02]).current\n  const bitmapData = useRef(new Array(images.length).fill(null)).current\n\n  const [imageArray, setImageArray] = useState()\n  const [dummyIndex, setDummyIndex] = useState()\n  const [dummy, setDummy] = useState()\n  const [opacity, setOpacity] = useState(1)\n  const [transparency, setTransparency] = useState(false)\n  const [showDots, setShowDots] = useState(true)\n  const [wireframeOpacity, setWireframeOpacity] = useState(1)\n  const [iterations, setIterations] = useState(-1)\n  const prevIteration = useRef(iterations)\n  const [controlPoints, setControlPoints] = useState([])\n\n  const gridItems = useRef([]).current\n\n  const [forceUpdate, setForceUpdate] = useState()\n\n  const canvasHolder = useRef()\n  const dotsHolder = useRef()\n\n  useEffect(() => {\n    if (!imageArray) {\n      let completed = 0\n      function callback() {\n        if (++completed === images.length) {\n          // if (CanvasDummyBuilder.meshables[0].parent) {\n          // gridItems.current = CanvasDummyBuilder.meshables.map((dummy, i) => {\n          //   const gridManager = new GridManager()\n          //   const { parent } = dummy\n          //   gridManager.init(parent.width, parent.height, 2, 2)\n          //   CanvasDummyBuilder.meshables[i] = dummy.initMesh(gridManager)\n          //   return gridManager\n          // })\n          // }\n\n          setDummyIndex(0)\n        }\n      }\n\n      images.forEach((url, index) => {\n        const img = new Image()\n        img.src = url\n\n        bitmapData[index] = img\n\n        img.onload = callback\n      })\n    }\n  }, [imageArray])\n\n  useEffect(() => {\n    if (dummyIndex >= 0) {\n      setDummy(CanvasDummyBuilder.meshables[dummyIndex])\n    }\n  }, [dummyIndex])\n\n  useEffect(() => {\n    if (dummy) {\n      while (canvasHolder.current.childNodes.length)\n        canvasHolder.current.removeChild(canvasHolder.current.childNodes[0])\n\n      dummy.refresh()\n      // canvasHolder.current.appendChild(dummy.meshCanvas.filler)\n      canvasHolder.current.appendChild(dummy.meshCanvas.output)\n      canvasHolder.current.appendChild(dummy.meshCanvas.wireframe)\n\n      dummy.meshCanvas.wireframe.style.opacity = wireframeOpacity\n\n      console.log(\"calling iterations\")\n      setTimeout(updateIterations, 100)\n    }\n  }, [dummy])\n\n  useEffect(() => {\n    if (dummy) {\n      dummy.meshCanvas.wireframe.style.opacity = wireframeOpacity\n    }\n  }, [wireframeOpacity])\n\n  function updateIterations(add_or_subtract) {\n    let next\n    switch (add_or_subtract) {\n      case \"+\":\n      case \"add\":\n        next = Math.min(6, iterations + 1)\n        break\n      default:\n        next = Math.max(0, iterations - 1)\n        break\n    }\n\n    const square = Math.pow(2, next)\n\n    let cols = dummy.meshCanvas.gridManager.columns\n    let rows = dummy.meshCanvas.gridManager.rows\n\n    if (square > rows || square > cols) {\n      console.error(\"NOPE\")\n      return\n    }\n\n    updateControlPoints(next)\n    setIterations(next)\n\n    prevIteration.current = next\n  }\n\n  useEffect(() => {\n    if (dummy && iterations === 0 && prevIteration.current < 0) {\n      prevIteration.current = iterations\n      updateIterations()\n    }\n  }, [iterations])\n\n  function updateControlPoints(next) {\n    next = next >= 0 ? next : iterations\n    let cols = dummy.meshCanvas.gridManager.columns\n    let rows = dummy.meshCanvas.gridManager.rows\n\n    const square = Math.pow(2, next)\n\n    cols /= square\n    rows /= square\n\n    const cols1 = dummy.meshCanvas.gridManager.gCols\n    let viewPoints = []\n    dummy.meshCanvas.gridManager.positions.forEach(coord => {\n      coord.isControl = false\n    })\n    console.clear()\n    if (dummy.meshCanvas.gridManager.positions.length === 4) {\n      viewPoints = [0, 1, 2, 3]\n    } else {\n      for (let i = 0; i < dummy.meshCanvas.gridManager.positions.length; i += cols * cols1) {\n        let point = dummy.meshCanvas.gridManager.positions[i]\n        point.isControl = true\n        viewPoints.push(i)\n\n        for (let c = rows; c < cols1; c += rows) {\n          point = dummy.meshCanvas.gridManager.positions[i + c]\n          point.isControl = true\n          viewPoints.push(i + c)\n        }\n      }\n    }\n    dummy.meshCanvas.gridManager.setControlPoints(viewPoints)\n    setControlPoints(viewPoints)\n  }\n\n  useEffect(() => {\n    if (dummy) updateControlPoints()\n  }, [props.forceUpdate])\n\n  function getControls(type) {\n    // return null\n    return (\n      <div className=\"controls\">\n        <div className=\"button-holder\">\n          {CanvasDummyBuilder.meshables.map((ignore, index) => {\n            return (\n              <div\n                className=\"button\"\n                key={`button_${index}`}\n                onClick={() => {\n                  setDummyIndex(index)\n                  setDummy(CanvasDummyBuilder.meshables[index])\n                }}\n              >{`Show Canvas ${index}`}</div>\n            )\n          })}\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              setOpacity(opacity ? 0 : transparency)\n            }}\n          >\n            <p>{`${!opacity ? \"Show\" : \"Hide\"} Mesh Warp`}</p>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              setWireframeOpacity(+!wireframeOpacity)\n            }}\n          >\n            <p>{`${!wireframeOpacity ? \"Show\" : \"Hide\"} Wireframe`}</p>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              setShowDots(!showDots)\n            }}\n          >\n            <p>{`${!showDots ? \"Show\" : \"Hide\"} Dots`}</p>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              const next_opacity = opacity === 1 ? 0.55 : 1\n              setTransparency(next_opacity)\n              setOpacity(next_opacity)\n            }}\n          >\n            <p>Toggle Transparency</p>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div className=\"button-input\">\n            <div\n              className=\"button\"\n              onClick={() => {\n                dummy.updateQuantity(\"+\")\n                updateControlPoints(iterations)\n                setForceUpdate(Math.random())\n              }}\n            >\n              <p>Double Points</p>\n            </div>\n            <div\n              className=\"button\"\n              onClick={() => {\n                dummy.updateQuantity(\"-\")\n                updateControlPoints(iterations)\n                setForceUpdate(Math.random())\n              }}\n            >\n              <p>Half Points</p>\n            </div>\n          </div>\n          <div className=\"button-input\">\n            <p>{`Iterations: ${Math.pow(2, iterations)}`}</p>\n            <div\n              className=\"iterate-button\"\n              onClick={() => {\n                updateIterations(\"+\")\n              }}\n            >\n              +\n            </div>\n            <div\n              className=\"iterate-button\"\n              onClick={() => {\n                updateIterations(\"-\")\n              }}\n            >\n              -\n            </div>\n          </div>\n          <div\n            className=\"button\"\n            onClick={() => {\n              const attributes = [\"width\", \"height\", \"columns\", \"rows\"]\n              let output = `{ `\n              const gm = dummy.meshCanvas.gridManager\n              attributes.forEach(attribute => {\n                output += `\"${attribute}\": ${gm[attribute]} , `\n              })\n\n              output += `\"positions\": [ `\n              gm.positions.forEach((coord, index) => {\n                output += `{ \"x\": ${coord.x}, \"y\": ${coord.y}, \"i\": ${coord.i}, \"isControl\": ${coord.isControl ||\n                  false} }`\n                if (gm.positions[index + 1]) output += \", \"\n              })\n\n              output += `], \"rootPositions\": [ `\n              gm.rootPositions.forEach((coord, index) => {\n                output += `{ \"x\": ${coord.x}, \"y\": ${coord.y}, \"i\": ${coord.i} }`\n                if (gm.positions[index + 1]) output += \", \"\n              })\n\n              // output += `], \"viewPoints\": [ `\n              // controlPoints.forEach(index => {\n              //   output += index\n              //   if (gm.positions[index + 1]) output += \", \"\n              // })\n              output += \"]}\"\n\n              console.clear()\n              console.log(output)\n\n              // width: ${GridManager.width}, height: ${GridManager.height}, width: ${GridManager.width}, height: ${GridManager.height},  `\n            }}\n          >\n            <p>Output Points</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!dummy) return null\n\n  return (\n    <div className=\"builder\">\n      <div className=\"holder\">\n        <div\n          className=\"guide\"\n          style={{\n            width: dummy.meshCanvas.output.width + 200,\n            height: dummy.meshCanvas.output.height + 200,\n          }}\n        >\n          <img draggable={false} src={bitmapData[dummyIndex].src} alt={`guide`} />\n          <div\n            className=\"canvas-holder\"\n            ref={canvasHolder}\n            style={{\n              opacity,\n            }}\n          ></div>\n\n          <div\n            ref={dotsHolder}\n            id=\"dots-holder\"\n            className=\"dots-holder\"\n            onMouseDown={event => {\n              dispatch(event, Infinity, dummyIndex, dotsHolder.current)\n            }}\n            style={{\n              opacity: +showDots,\n              width: dummy.meshCanvas.output.width,\n              height: dummy.meshCanvas.output.height,\n            }}\n          >\n            <>\n              {controlPoints.map(index => {\n                return (\n                  <div\n                    onMouseDown={event => {\n                      dispatch(event, index, dummyIndex, dotsHolder.current, Math.pow(2, iterations))\n                    }}\n                    key={`dot_${index}`}\n                    className=\"grid-dot\"\n                    style={{\n                      left: dummy.meshCanvas.gridManager.positions[index].x,\n                      top: dummy.meshCanvas.gridManager.positions[index].y,\n                    }}\n                  >\n                    <div className=\"cross-01\" />\n                    <div className=\"cross-02\" />\n                    {/* <p>{index}</p> */}\n                  </div>\n                )\n              })}\n              {/* {dummy.meshCanvas.gridManager.positions\n                .filter((point, index) => !controlPoints.includes(index))\n                .map((point, index) => {\n                  return (\n                    <div\n                      key={`dot_${point.i}`}\n                      className=\"grid-dot-small\"\n                      style={{\n                        left: point.x,\n                        top: point.y,\n                      }}\n                    >\n                      <p>{point.i}</p>\n                    </div>\n                  )\n                })} */}\n            </>\n            {/* </div> */}\n          </div>\n        </div>\n      </div>\n      {getControls()}\n    </div>\n  )\n})\n\nexport default Builder\n","import React, { useEffect, useRef, useState } from \"react\"\nimport { traverseTwoPhase } from \"react-dom/test-utils\"\nimport GridManager from \"../../lib/GridManager\"\nimport CanvasDummyBuilder from \"../../lib/CanvasDummyBuilder\"\n\nimport { CanvasColoring } from \"@ff0000-ad-tech/ad-canvas\"\n\nimport \"./style.scss\"\n// while (whatever.current.childNodes.length) whatever.current.removeChild(whatever.current.childNodes[0])\n//           CanvasDummyBuilder.meshables.forEach((dummy, i) => {\n//             whatever.current.appendChild(dummy.meshCanvas.output)\n//           })\nimport { Actions } from \"../../App\"\n\n// const delayedPromise = async status => {\n//   console.warn(\"called\")\n//   return new Promise((resolve, reject) => {\n//     setTimeout(resolve, 300)\n//   })\n// }\n\nconst Preview = React.forwardRef((props, ref) => {\n  const { thumbs, layers } = props\n  const canvasRef = useRef()\n\n  const [selected, setSelected] = useState(0)\n\n  // const [status, setStatus] = useState(\"Loading\")\n\n  useEffect(async () => {\n    if (selected >= 0) {\n      CanvasDummyBuilder.refresh(thumbs[selected])\n      const canvas = canvasRef.current\n      const ctx = canvas.getContext(\"2d\")\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n      for (let i = layers.length - 1; i > -1; i--) {\n        const img = layers[i]\n        switch (i) {\n          case 0:\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            break\n          case 1:\n            ctx.globalCompositeOperation = \"multiply\"\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            break\n          case 3:\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            ctx.globalCompositeOperation = \"source-atop\"\n\n            ctx.drawImage(CanvasDummyBuilder.meshables[2].meshCanvas.filler, 0, 0, canvas.width, canvas.height)\n            ctx.drawImage(CanvasDummyBuilder.meshables[2].meshCanvas.output, 0, 0, canvas.width, canvas.height)\n            break\n          case 4:\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            ctx.globalCompositeOperation = \"source-atop\"\n\n            ctx.drawImage(CanvasDummyBuilder.meshables[0].meshCanvas.filler, 0, 0, canvas.width, canvas.height)\n            ctx.drawImage(CanvasDummyBuilder.meshables[0].meshCanvas.output, 0, 0, canvas.width, canvas.height)\n            break\n          default:\n            break\n        }\n        ctx.globalCompositeOperation = \"source-over\"\n\n        CanvasColoring.tint({\n          target: canvasRef.current,\n          color: \"rgb(255, 255, 255)\",\n          amount: 0.0075,\n        })\n        CanvasColoring.saturation({\n          target: canvasRef.current,\n          amount: 1.04,\n        })\n        CanvasColoring.contrast({\n          target: canvasRef.current,\n          amount: 1.015,\n        })\n      }\n    }\n  }, [selected])\n\n  return (\n    <div className=\"container\">\n      <div className=\"preview\">\n        <div className=\"samples\">\n          {thumbs.map((img, i) => {\n            return (\n              <img\n                className={i === selected ? \"selected\" : \"\"}\n                src={img.src}\n                key={`${img.src}_${i}`}\n                alt={`thumbnail${i}`}\n                onClick={() => {\n                  setSelected(i)\n                }}\n              />\n            )\n          })}\n        </div>\n        <div className=\"preview-content\">\n          <canvas ref={canvasRef} width={1000} height={1000} />\n          {/* {status && <div className=\"status\">{status}</div>} */}\n        </div>\n      </div>\n    </div>\n  )\n})\n\nexport default Preview\n","import React, { useEffect, useRef, useState, useReducer } from \"react\"\nimport { Router, Route, Switch, withRouter } from \"react-router-dom\"\nimport history from \"./history.js\"\n\nimport Builder from \"./components/Builder\"\nimport Preview from \"./components/Preview\"\n// import CanvasDrawer from \"./components/CanvasDrawer\"\n// import MeshDrawer from \"./components/MeshDrawer\"\n// import Grid from \"./components/Grid\"\nimport CanvasDummyBuilder from \"./lib/CanvasDummyBuilder\"\n\nimport \"./App.scss\"\n// import GridManager from \"./lib/GridManager\"\n\nexport const Actions = {\n  MOUSE_DOWN: \"mousedown\",\n  MOUSE_UP: \"mouseup\",\n  MOUSE_MOVE: \"mousemove\",\n}\n\n/*\n\nMAIN COMP:\n  Comp: 1000x1000\n  Guide: 1200x1200\n\n\nRIGHT SOCK:\n  Canvas 1 (lives on main comp):\n    294x971\n      Bitmap Data Drawn into Canvas:\n        x: -4, y: -2\n        590x975\n\n\n\n\n\n\nLEFT SOCK:\n  Canvas 1 (initial warping used in Canvas 2):\n    297x974\n      Bitmap Data Drawn into Canvas:\n        x: -293 (Align.RIGHT), y: -1\n        590x975\n      Guide:\n        487x1140\n  Canvas 2 (lives on main comp, warps Canvas 1):\n    287x940\n\n\n\n\n\n\n*/\n\nexport default function App() {\n  const [bodyRef, setBody] = useState()\n\n  const dotIndexRef = useRef()\n  const boundingRect = useRef()\n  const mouseDownPos = useRef()\n  const iterationsRef = useRef()\n  const [forceUpdate, setForceUpdate] = useState()\n\n  const assets = [\n    // require(\"./assets/textures/asset_01a.jpg\").default,\n    require(\"./assets/textures/asset_01.jpg\").default,\n    require(\"./assets/textures/asset_02.jpg\").default,\n    require(\"./assets/textures/asset_03.jpg\").default,\n    require(\"./assets/textures/asset_04.jpg\").default,\n    require(\"./assets/textures/asset_bp2.jpg\").default,\n    require(\"./assets/textures/asset_looney2.jpg\").default,\n    require(\"./assets/textures/asset_tmnt2.jpg\").default,\n  ]\n  const assetData = useRef([])\n\n  const layers = [\n    require(\"./assets/layers/layer_01.png\").default,\n    require(\"./assets/layers/layer_02_multiply.png\").default,\n    require(\"./assets/layers/layer_03_base.png\").default,\n    require(\"./assets/layers/sock_mask_left.png\").default,\n    require(\"./assets/layers/sock_mask_right.png\").default,\n  ]\n  const layerData = useRef([])\n\n  // const whatever = useRef()\n\n  const [sourceBitmapData, setSourceBitmapData] = useState()\n\n  const canvasHolder = useRef()\n\n  const gridTarget = useRef()\n\n  ////////////////////////////////////////////////////////////\n\n  function handleMouseEvent(event, index, dummyIndex, parent, iterations) {\n    event.preventDefault()\n    event.stopPropagation()\n    switch (event.type) {\n      case Actions.MOUSE_DOWN:\n        bodyRef.addEventListener(Actions.MOUSE_MOVE, handleMouseEvent, false)\n        bodyRef.addEventListener(Actions.MOUSE_UP, handleMouseEvent, false)\n        gridTarget.current = dummyIndex\n        dotIndexRef.current = index\n        boundingRect.current = parent.getBoundingClientRect()\n        iterationsRef.current = iterations\n\n        mouseDownPos.current = {\n          x: event.pageX,\n          y: event.pageY,\n        }\n\n        break\n      case Actions.MOUSE_UP:\n        bodyRef.removeEventListener(Actions.MOUSE_MOVE, handleMouseEvent, false)\n        bodyRef.removeEventListener(Actions.MOUSE_UP, handleMouseEvent, false)\n        gridTarget.current = null\n        dotIndexRef.current = null\n        boundingRect.current = null\n        mouseDownPos.current = null\n        break\n      case Actions.MOUSE_MOVE:\n        const targetMeshable = CanvasDummyBuilder.meshables[gridTarget.current]\n\n        // Infinity means move everything as a large group\n        if (dotIndexRef.current === Infinity) {\n          // targetMeshable.meshCanvas.gridManager.positions.forEach((coord, i) => {\n          //   // console.log(i, targetMeshable.updateDot)\n          //   targetMeshable.updateDot(\n          //     i,\n          //     coord.x - (mouseDownPos.current.x - event.pageX),\n          //     coord.y - (mouseDownPos.current.y - event.pageY),\n          //     iterations\n          //   )\n          // })\n          mouseDownPos.current = {\n            x: event.pageX,\n            y: event.pageY,\n          }\n        } else {\n          targetMeshable.updateDot(\n            dotIndexRef.current,\n            event.pageX - boundingRect.current.x,\n            event.pageY - boundingRect.current.y - document.documentElement.scrollTop,\n            iterationsRef.current\n          )\n        }\n\n        setForceUpdate(Math.random())\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (!bodyRef) {\n      setBody(document.getElementsByTagName(\"body\")[0])\n    }\n  }, [bodyRef])\n\n  ////////////////////////////////////////////////////////////\n  useEffect(() => {\n    if (!sourceBitmapData) {\n      let completed = 0\n      function callback() {\n        if (++completed === assets.length + layers.length) {\n          const img = assetData.current[0]\n\n          // setTimeout(() => {\n          setSourceBitmapData(img)\n          // }, 1000)\n          CanvasDummyBuilder.init(img)\n        }\n      }\n\n      assets.forEach((url, i) => {\n        const img = new Image()\n        img.src = url\n\n        img.onload = () => {\n          assetData.current[i] = img\n          callback()\n        }\n      })\n      layers.forEach((url, i) => {\n        const img = new Image()\n        img.src = url\n\n        img.onload = () => {\n          layerData.current[i] = img\n          callback()\n        }\n      })\n    }\n  }, [sourceBitmapData])\n\n  // return (\n  //   <div>\n  //     <div ref={canvasHolder} />\n  //   </div>\n  // )\n\n  if (!sourceBitmapData) return <div className=\"loading\">LOADING!</div>\n\n  // return <div ref={whatever} />\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route\n          path=\"/admin\"\n          // path=\"/\"\n          render={props => {\n            return <Builder sourceBitmapData={sourceBitmapData} dispatch={handleMouseEvent} forceUpdate={forceUpdate} />\n          }}\n        />\n        <Route path=\"\" render={props => <Preview thumbs={assetData.current} layers={layerData.current} />} />\n      </Switch>\n    </Router>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\n// ReactDOM.render(\n// \t<React.StrictMode>\n// \t\t<App />\n// \t</React.StrictMode>,\n// \tdocument.getElementById('root')\n// )\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}