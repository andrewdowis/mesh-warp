{"version":3,"sources":["assets/guides/guide_right_32.jpg","assets/guides/guide_left_01_32.jpg","assets/guides/guide_left_02_32.jpg","assets/textures/asset_01.jpg","assets/textures/asset_02.jpg","assets/textures/asset_03.jpg","assets/textures/asset_04.jpg","assets/textures/asset_bp2.jpg","assets/textures/asset_looney2.jpg","assets/textures/asset_tmnt2.jpg","assets/layers/layer_03_base.png","assets/layers/layer_01.png","assets/layers/layer_02_multiply.png","assets/layers/layer_03_base_02.png","assets/layers/sock_mask_left.png","assets/layers/sock_mask_right.png","history.js","lib/GridManager.js","lib/MeshCanvas.js","lib/CanvasDummy.js","lib/CanvasDummyBuilder.js","components/Builder/index.js","components/Preview/index.js","components/Gridder/index.js","hooks/useEffectOnce.js","assets/comps/version06.jpg","assets/comps/version08.jpg","assets/comps/version09.jpg","assets/comps/version10.jpg","components/Comps/index.js","App.js","reportWebVitals.js","index.js"],"names":["createBrowserHistory","GridManager","width","height","rows","columns","rootPositions","positions","this","build","makePoints","x","y","indexes","forEach","index","length","add_or_subtract","new_points","old_points","new_points_01_columns","new_points_02_rows","new_points_03_square","i","gCols","push","getAverage","direction","col_total","pushNew","array1","array2","nextValue","shift","gRows","c","coord","colWidth","rowHeight","make_positions","total","Math","floor","corners","tl","tr","bl","br","square","makeGo","max","squareValue","checks","undefined","props","divisions","amount","pow","center","moveUpperLeft","moveUpperRight","moveLowerRight","moveLowerLeft","double","corner","item","opposite","hypoten","adjacent","moveCommon","mid1","mid2","avg","adjacentPos","hypotenPos","oppositePos","centerPos","array","controlPoints","map","MeshCanvas","image","gridManager","output","document","createElement","id","filler","wireframe","style","src","toggleColor","refresh","ctx_wireframe","getContext","clearRect","strokeStyle","color","lineWidth","neighbor","beginPath","upper","moveTo","lineTo","stroke","closePath","r1","s1","t1","r2","s2","t2","r3","s3","t3","parseFloat","a","b","showFiller","canvi","img","gm","w","h","subwidth","subheight","target","rewind_amount","skip_amount","canvas","offset","ctx","c1","c2","c3","c4","rootX","rootY","x1","y1","x2","y2","x3","y3","x4","y4","xn","linearSolution","yn","save","setTransform","fillStyle","fill","clip","drawImage","restore","xm","ym","meshify","updateMeshLines","updateQuantity","float","CanvasDummy","data","mesh","image_width","image_height","values","parent","initMesh","init","meshCanvas","iterations","updateDot","prev","canvas_data","right_sock","left_sock_01","left_sock_02","meshables","dummies","obj","dummy","addMesh","filter","Builder","React","forwardRef","ref","sourceBitmapData","dispatch","guideRight","require","default","guideLeft01","guideLeft02","images","useRef","current","bitmapData","Array","useState","imageArray","dummyIndex","setDummyIndex","setDummy","meshOpacity","setMeshOpacity","setTransparency","showDots","wireframeOpacity","setWireframeOpacity","setIterations","prevIteration","setControlPoints","hideControls","setHideControls","setForceUpdate","canvasHolder","dotsHolder","updateIterations","next","min","cols","console","error","updateControlPoints","cols1","viewPoints","isControl","point","useEffect","completed","callback","url","Image","onload","CanvasDummyBuilder","childNodes","removeChild","appendChild","opacity","log","setTimeout","forceUpdate","className","draggable","alt","onMouseDown","event","Infinity","left","top","onClick","next_opacity","random","attribute","clear","Status","Preview","thumbs","layers","canvasRef","selected","setSelected","status","setStatus","update_status","Promise","resolve","reject","status_promise","globalCompositeOperation","next_status","CanvasColoring","tint","saturation","contrast","Gridder","setBitmapData","usedOnce","useEffectOnce","dimensions","split","toDataURL","loadImage","Comps","img06","img08","img09","img10","compIndex","setCompIndex","hoverIndex","setHoverIndex","getIndex","value","onMouseOver","onMouseOut","Actions","App","bodyRef","setBody","dotIndexRef","boundingRect","mouseDownPos","mouseCurPos","iterationsRef","assets","assetData","shiftState","setShiftState","shiftDown","mouseDown","setMouseDown","layerData","setSourceBitmapData","gridTarget","handleKeyEvents","keyCode","type","handleMouseEvent","preventDefault","stopPropagation","addEventListener","cursor","getBoundingClientRect","pageX","pageY","removeEventListener","targetMeshable","sub","downX","downY","boundX","boundY","nextX","documentElement","scrollLeft","nextY","scrollTop","getElementsByTagName","history","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.f74b05c5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/guide_right_32.fb590799.jpg\";","export default __webpack_public_path__ + \"static/media/guide_left_01_32.9bf299c8.jpg\";","export default __webpack_public_path__ + \"static/media/guide_left_02_32.02ffd1cb.jpg\";","export default __webpack_public_path__ + \"static/media/asset_01.dae64ad5.jpg\";","export default __webpack_public_path__ + \"static/media/asset_02.a1965573.jpg\";","export default __webpack_public_path__ + \"static/media/asset_03.885eb998.jpg\";","export default __webpack_public_path__ + \"static/media/asset_04.7b80fa12.jpg\";","export default __webpack_public_path__ + \"static/media/asset_bp2.31ab06fd.jpg\";","export default __webpack_public_path__ + \"static/media/asset_looney2.11c89469.jpg\";","export default __webpack_public_path__ + \"static/media/asset_tmnt2.c93b4bf5.jpg\";","export default __webpack_public_path__ + \"static/media/layer_03_base.caa520d5.png\";","export default __webpack_public_path__ + \"static/media/layer_01.0eaae9e9.png\";","export default __webpack_public_path__ + \"static/media/layer_02_multiply.f88cdf8f.png\";","export default __webpack_public_path__ + \"static/media/layer_03_base_02.46feb102.png\";","export default __webpack_public_path__ + \"static/media/sock_mask_left.c26b88b5.png\";","export default __webpack_public_path__ + \"static/media/sock_mask_right.3b119e55.png\";","import { createBrowserHistory } from \"history\"\n\nexport default createBrowserHistory()\n","export default class GridManager {\n  init({ width, height, rows, columns, rootPositions, positions }) {\n    if (!this.build) {\n      this.build = true\n      this.width = width\n      this.height = height\n      this.rows = rows\n      this.columns = columns\n\n      this.makePoints(rootPositions, positions)\n    }\n  }\n\n  getAverage(...indexes) {\n    let x = 0\n    let y = 0\n    indexes.forEach(index => {\n      x += this.positions[index].x\n      y += this.positions[index].y\n    })\n    x /= indexes.length\n    y /= indexes.length\n\n    return { x, y }\n  }\n\n  updateQuantity(add_or_subtract) {\n    let new_points = []\n    switch (add_or_subtract) {\n      case \"+\":\n      case \"add\":\n        const old_points = this.positions\n        const new_points_01_columns = []\n        const new_points_02_rows = []\n        const new_points_03_square = []\n\n        for (let i = 0; i < old_points.length; i++) {\n          if (i + this.gCols < old_points.length) new_points_02_rows.push(this.getAverage(i, i + this.gCols))\n          if (i % this.gCols !== this.columns) {\n            if (i + 1 < old_points.length) new_points_01_columns.push(this.getAverage(i, i + 1))\n            if (i + this.gCols < old_points.length)\n              new_points_03_square.push(this.getAverage(i, i + 1, i + this.gCols, i + this.gCols + 1))\n          }\n        }\n\n        let direction = \"across\"\n        const col_total = this.columns + this.gCols\n        function pushNew(array1, array2, nextValue) {\n          for (let i = 0; i < col_total; i++) {\n            if (i % 2) {\n              new_points.push(array1.shift())\n            } else {\n              new_points.push(array2.shift())\n            }\n\n            new_points[new_points.length - 1].i = new_points.length - 1\n            if (i === col_total - 1) direction = nextValue\n          }\n        }\n        while (\n          old_points.length +\n          new_points_01_columns.length +\n          new_points_02_rows.length +\n          new_points_03_square.length\n        ) {\n          switch (direction) {\n            case \"across\":\n              pushNew(new_points_01_columns, old_points, \"middle\")\n              break\n            case \"middle\":\n              pushNew(new_points_03_square, new_points_02_rows, \"across\")\n\n              break\n            default:\n              break\n          }\n        }\n\n        this.columns *= 2\n        this.rows *= 2\n        break\n      case \"-\":\n      case \"subtract\":\n        let modulo = 1\n\n        for (let i = 0; i < this.gRows; i += 2) {\n          for (let c = 0; c < this.gCols; c += 2) {\n            const index = i * this.gCols + c\n            let coord = this.positions[index]\n            coord.i = index\n            new_points.push(coord)\n          }\n        }\n\n        this.columns /= 2\n        this.rows /= 2\n        break\n      default:\n        break\n    }\n\n    this.gCols = this.columns + 1\n    this.gRows = this.rows + 1\n\n    this.positions = new_points\n\n    this.makePoints()\n  }\n\n  makePoints(rootPositions, positions) {\n    const colWidth = this.width / this.columns\n    const rowHeight = this.height / this.rows\n\n    this.gCols = this.columns + 1\n    this.gRows = this.rows + 1\n\n    if (positions && rootPositions) {\n      this.positions = positions\n      this.rootPositions = rootPositions\n    } else {\n      const total = this.gRows * this.gCols\n      this.rootPositions = []\n      let make_positions\n      if (!this.positions) {\n        this.positions = []\n        make_positions = true\n      }\n      if (!this.rootPositions.length) {\n        for (let i = 0; i < total; i++) {\n          if (make_positions)\n            this.positions.push({\n              x: (i % this.gCols) * colWidth,\n              y: Math.floor(i / this.gCols) * rowHeight,\n              i,\n            })\n          this.rootPositions.push({\n            x: (i % this.gCols) * colWidth,\n            y: Math.floor(i / this.gCols) * rowHeight,\n            i,\n          })\n        }\n      }\n    }\n    this.corners = {\n      tl: 0,\n      tr: this.rows,\n      bl: this.gCols * this.rows,\n      br: this.gCols * this.rows + this.rows,\n    }\n  }\n\n  updateDot(i, x, y, square) {\n    this.positions[i] = {\n      x,\n      y,\n      i,\n    }\n\n    this.makeGo(i, square, this.columns / Math.max(1, square / 2))\n  }\n\n  makeGo(index, squareValue, checks) {\n    if (checks <= 1 || index === null || index === undefined || !(index >= 0)) return\n\n    const props = {\n      divisions: this.columns / squareValue,\n      amount: Math.pow(this.columns, 2) / squareValue,\n      center: index,\n    }\n    const corners = [\n      this.moveUpperLeft(props),\n      this.moveUpperRight(props),\n      this.moveLowerRight(props),\n      this.moveLowerLeft(props),\n    ]\n\n    const double = squareValue * 2\n    corners.forEach(corner => {\n      for (let item in corner) this.makeGo(corner[item], double, checks / 2)\n    })\n  }\n\n  moveLowerLeft({ divisions, amount, center }) {\n    if (center % this.gCols === 0) return\n\n    // to the left or the right\n    let opposite = center - divisions\n    // across in a corner\n    let hypoten = center + amount\n    // above or below\n    let adjacent = hypoten + divisions\n\n    return this.moveCommon({ center, opposite, adjacent, hypoten })\n  }\n  moveLowerRight({ divisions, amount, center }) {\n    if ((center + 1) % this.gCols === 0) return\n\n    // to the left or the right\n    let opposite = center + divisions\n    // above or below\n    let adjacent = opposite + amount\n    // across in a corner\n    let hypoten = adjacent + divisions\n\n    return this.moveCommon({ center, opposite, adjacent, hypoten })\n  }\n  moveUpperRight({ divisions, amount, center }) {\n    if ((center + 1) % this.gCols === 0) return\n    // to the left or the right\n    let opposite = center + divisions\n    // across in a corner\n    let hypoten = center - amount\n    // above or below\n    let adjacent = hypoten - divisions\n\n    return this.moveCommon({ center, opposite, adjacent, hypoten })\n  }\n\n  moveUpperLeft({ divisions, amount, center }) {\n    if (center % this.gCols === 0) return\n\n    // to the left or the right\n    let opposite = center - divisions\n    // above or below\n    let adjacent = opposite - amount\n    // across in a corner\n    let hypoten = adjacent - divisions\n\n    return this.moveCommon({ center, opposite, adjacent, hypoten })\n  }\n\n  moveCommon({ center, opposite, adjacent, hypoten }) {\n    let mid1 = (center + adjacent) / 2\n    let mid2 = (center + opposite) / 2\n\n    let avg = (adjacent + opposite) / 2\n\n    let adjacentPos = this.positions[adjacent]\n    let hypotenPos = this.positions[hypoten]\n    let oppositePos = this.positions[opposite]\n\n    let centerPos = this.positions[center]\n    if (\n      adjacentPos &&\n      centerPos &&\n      hypotenPos &&\n      oppositePos &&\n      this.positions[avg] &&\n      this.positions[mid1] &&\n      this.positions[mid2]\n    ) {\n      this.positions[avg] = {\n        x: (adjacentPos.x + oppositePos.x + hypotenPos.x + centerPos.x) / 4,\n        y: (adjacentPos.y + oppositePos.y + hypotenPos.y + centerPos.y) / 4,\n        i: avg,\n      }\n\n      this.positions[mid1] = {\n        x: (centerPos.x + adjacentPos.x) / 2,\n        y: (centerPos.y + adjacentPos.y) / 2,\n        i: mid1,\n      }\n      this.positions[mid2] = {\n        x: (centerPos.x + oppositePos.x) / 2,\n        y: (centerPos.y + oppositePos.y) / 2,\n        i: mid2,\n      }\n    }\n\n    return { avg, mid1, mid2, center }\n  }\n\n  setControlPoints(array) {\n    this.controlPoints = array.map(index => index)\n  }\n}\n","import { MathUtils } from \"@ff0000-ad-tech/ad-utils\"\nimport { getAnglePoint } from \"@ff0000-ad-tech/ad-utils/lib/MathUtils\"\n\nconst getAverage = (...numbers) => {\n  let number = 0\n  numbers.forEach(num => (number += num))\n  return number / numbers.length\n}\n\nconst averagePoints = (...points) => {\n  let newPoint = { x: 0, y: 0 }\n  points.forEach(point => {\n    newPoint.x += point.x\n    newPoint.y += point.y\n  })\n  return {\n    x: newPoint.x / points.length,\n    y: newPoint.y / points.length,\n  }\n}\n\nexport default class MeshCanvas {\n  init(width, height, image, gridManager) {\n    this.output = document.createElement(\"canvas\")\n    this.output.id = `output`\n\n    this.filler = document.createElement(\"canvas\")\n    this.filler.id = `filler`\n\n    this.wireframe = document.createElement(\"canvas\")\n    this.wireframe.id = `wireframe`\n\n    this.output.width = width\n    this.output.height = height\n\n    this.filler.width = width\n    this.filler.height = height\n\n    const mult = 2\n    this.wireframe.width = width * mult\n    this.wireframe.height = height * mult\n    this.wireframe.style.width = `${width}px`\n    this.wireframe.style.height = `${height}px`\n\n    this.src = image\n\n    this.gridManager = gridManager\n\n    this.toggleColor()\n    this.refresh()\n  }\n\n  updateMeshLines() {\n    // update the mesh lines\n    let ctx_wireframe = this.wireframe.getContext(\"2d\")\n\n    ctx_wireframe.clearRect(0, 0, this.wireframe.width, this.wireframe.height)\n    ctx_wireframe.strokeStyle = this.color\n    ctx_wireframe.lineWidth = 1.5\n    const mult = 2\n    for (let i = 0; i < this.gridManager.positions.length; i++) {\n      const coord = this.gridManager.positions[i]\n      let neighbor = this.gridManager.positions[i + 1]\n      if (i && (i + 1) % this.gridManager.gCols === 0) neighbor = null\n      ctx_wireframe.beginPath()\n      if (i >= this.gridManager.gCols) {\n        const upper = this.gridManager.positions[i - this.gridManager.columns - 1]\n        ctx_wireframe.moveTo(upper.x * mult, upper.y * mult)\n        ctx_wireframe.lineTo(coord.x * mult, coord.y * mult)\n      } else {\n        ctx_wireframe.moveTo(coord.x * mult, coord.y * mult)\n      }\n      if (neighbor) ctx_wireframe.lineTo(neighbor.x * mult, neighbor.y * mult)\n      ctx_wireframe.stroke()\n      ctx_wireframe.closePath()\n    }\n\n    // ctx_wireframe.strokeStyle = \"orange\"\n    // ctx_wireframe.lineWidth = 0.5\n    // for (let i = 0; i < this.gridManager.positions.length; i++) {\n    //   if (i % this.gridManager.gCols === 0) continue\n\n    //   const coord = this.gridManager.positions[i]\n    //   let neighbor = this.gridManager.positions[i + this.gridManager.columns]\n\n    //   if (!neighbor) break\n\n    //   ctx_wireframe.beginPath()\n    //   ctx_wireframe.moveTo(coord.x, coord.y)\n    //   ctx_wireframe.lineTo(neighbor.x, neighbor.y)\n\n    //   ctx_wireframe.stroke()\n    //   ctx_wireframe.closePath()\n    // }\n\n    // console.warn(this.gridManager.controlPoints)\n    // if (this.gridManager.controlPoints) {\n    // }\n  }\n\n  linearSolution(r1, s1, t1, r2, s2, t2, r3, s3, t3) {\n    // make them all floats\n    r1 = parseFloat(r1)\n    s1 = parseFloat(s1)\n    t1 = parseFloat(t1)\n    r2 = parseFloat(r2)\n    s2 = parseFloat(s2)\n    t2 = parseFloat(t2)\n    r3 = parseFloat(r3)\n    s3 = parseFloat(s3)\n    t3 = parseFloat(t3)\n\n    let a = ((t2 - t3) * (s1 - s2) - (t1 - t2) * (s2 - s3)) / ((r2 - r3) * (s1 - s2) - (r1 - r2) * (s2 - s3))\n    let b = ((t2 - t3) * (r1 - r2) - (t1 - t2) * (r2 - r3)) / ((s2 - s3) * (r1 - r2) - (s1 - s2) * (r2 - r3))\n    let c = t1 - r1 * a - s1 * b\n\n    return [a, b, c]\n  }\n\n  meshify(showFiller = false) {\n    const canvi = [this.output]\n    if (showFiller) canvi.push(this.filler)\n    // console.log(`%c ${showFiller}`, \"color: black; background-color: cyan; font-style: italic; padding: 2px;\")\n    let img = this.src\n\n    let gm = this.gridManager\n    let { columns, rows } = gm\n    let w = canvi[0].width\n    let h = canvi[0].height\n\n    let subwidth = img.width / columns\n    let subheight = img.height / rows\n\n    const target = gm.positions.length - 1 - columns - 2\n    const rewind_amount = columns + 1\n    const skip_amount = rewind_amount * rows - 1\n\n    canvi.forEach((canvas, c) => {\n      const offset = c // * 1\n\n      let ctx = canvas.getContext(\"2d\")\n      ctx.clearRect(0, 0, w, h)\n\n      // render the images\n      for (let i = target; i > -1; i -= rewind_amount) {\n        const c1 = gm.positions[i]\n        const c2 = gm.positions[i + 1]\n        const c3 = gm.positions[i + 1 + columns]\n        const c4 = gm.positions[i + 2 + columns]\n\n        let { x: rootX, y: rootY } = gm.rootPositions[i]\n\n        let x1 = c1.x + offset\n        let y1 = c1.y + offset\n        let x2 = c2.x + offset\n        let y2 = c2.y + offset\n        let x3 = c3.x + offset\n        let y3 = c3.y + offset\n        let x4 = c4.x + offset\n        let y4 = c4.y + offset\n\n        // the bottom-right face\n        let xn = this.linearSolution(subwidth, subheight, x4, subwidth, 0, x2, 0, subheight, x3)\n        let yn = this.linearSolution(subwidth, subheight, y4, subwidth, 0, y2, 0, subheight, y3)\n\n        ctx.save()\n        ctx.setTransform(xn[0], yn[0], xn[1], yn[1], xn[2], yn[2])\n        ctx.beginPath()\n        ctx.moveTo(subwidth, subheight)\n        ctx.lineTo(subwidth, 0)\n        ctx.lineTo(0, subheight)\n        ctx.closePath()\n        ctx.fillStyle = \"transparent\"\n        // ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"\n        // ctx.fillStyle = \"blue\"\n        ctx.fill()\n        ctx.clip()\n        ctx.drawImage(img, rootX, rootY, subwidth, subheight, 0, 0, subwidth, subheight)\n\n        ctx.restore()\n\n        // the top-left face\n        let xm = this.linearSolution(0, 0, x1, subwidth, 0, x2, 0, subheight, x3)\n        let ym = this.linearSolution(0, 0, y1, subwidth, 0, y2, 0, subheight, y3)\n\n        ctx.save()\n        ctx.setTransform(xm[0], ym[0], xm[1], ym[1], xm[2], ym[2])\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(subwidth, 0)\n        ctx.lineTo(0, subheight)\n        ctx.closePath()\n        ctx.fillStyle = \"transparent\"\n        // ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"\n        // ctx.fillStyle = \"blue\"\n        ctx.fill()\n        ctx.clip()\n        ctx.drawImage(img, rootX, rootY, subwidth, subheight, 0, 0, subwidth, subheight)\n        ctx.restore()\n\n        if (i && i - rewind_amount < 0) i += skip_amount\n      }\n    })\n  }\n\n  refresh(showFiller = false) {\n    this.meshify(showFiller)\n    this.updateMeshLines()\n  }\n\n  updateQuantity(add_or_subtract) {\n    this.gridManager.updateQuantity(add_or_subtract)\n  }\n\n  toggleColor(float = false) {\n    this.color = !float ? \"cyan\" : \"red\"\n    this.refresh()\n  }\n}\n","import GridManager from \"./GridManager\"\nimport MeshCanvas from \"./MeshCanvas\"\n\nexport default class CanvasDummy {\n  init(props) {\n    const { width, height, image, id, data, mesh } = props\n\n    const { src, x, y, width: image_width, height: image_height } = image\n\n    this.id = id\n\n    this.values = [src, x || 0, y || 0, image_width || src.width, image_height || src.height]\n    this.parent = src\n\n    if (mesh) {\n      this.initMesh(width, height, data)\n    } else {\n      this.canvas = document.createElement(\"canvas\")\n      this.canvas.id = `dummy_canvas_${id}`\n\n      this.canvas.width = width\n      this.canvas.height = height\n      const ctx = this.canvas.getContext(\"2d\")\n\n      ctx.drawImage(...this.values)\n    }\n\n    // document.getElementsByTagName(\"body\").appendChild(canvas)\n  }\n\n  initMesh(width, height, data) {\n    const gridManager = new GridManager()\n\n    // data = null\n    let thing = true\n    // thing = false\n    if (thing) {\n      data = data || {\n        width: this.parent.width,\n        height: this.parent.height,\n        columns: 2,\n        rows: 2,\n      }\n    } else {\n      data = data || {\n        width: this.parent.width,\n        height: this.parent.height,\n        columns: 4,\n        rows: 4,\n      }\n    }\n\n    gridManager.init(data)\n\n    this.meshCanvas = new MeshCanvas()\n    this.meshCanvas.init(width, height, this.parent, gridManager)\n\n    // this.parentDummy = parentDummy\n  }\n\n  updateQuantity(add_or_subtract) {\n    this.meshCanvas.updateQuantity(add_or_subtract)\n    this.refresh()\n  }\n\n  updateDot(index, x, y, iterations) {\n    this.meshCanvas.gridManager.updateDot(index, x, y, iterations)\n    this.meshCanvas.refresh()\n  }\n\n  refresh(showFiller = false) {\n    if (this.meshCanvas) {\n      this.meshCanvas.refresh(showFiller)\n    } else {\n      let ctx = this.canvas.getContext(\"2d\")\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      ctx.drawImage(...this.values)\n    }\n  }\n}\n","import CanvasDummy from \"./CanvasDummy\"\n\nimport right_sock from \"../data/right_sock.json\"\nimport left_sock_01 from \"../data/left_sock_01.json\"\nimport left_sock_02 from \"../data/left_sock_02.json\"\n\nclass CanvasDummyBuilder {\n  init(src) {\n    const canvas_data = [\n      {\n        id: \"right_sock_source\",\n        width: 294,\n        height: 971,\n        image: {\n          x: -4,\n          y: -2,\n          width: 590,\n          height: 975,\n        },\n      },\n      {\n        id: \"right_sock_target\",\n        width: 1000,\n        height: 1000,\n        image: { src: \"right_sock_source\" },\n        data: right_sock,\n      },\n      {\n        id: \"left_sock_source\",\n        width: 297,\n        height: 974,\n        image: {\n          x: -293,\n          y: -1,\n          width: 590,\n          height: 975,\n        },\n      },\n      {\n        id: \"left_sock_target_01\",\n        width: 287,\n        height: 940,\n        image: {\n          x: -10,\n          y: -34,\n          width: 297,\n          height: 974,\n          src: \"left_sock_source\",\n        },\n        data: left_sock_01,\n      },\n      {\n        id: \"left_sock_target_02\",\n        width: 1000,\n        height: 1000,\n        image: { src: \"left_sock_target_01\" },\n        data: left_sock_02,\n      },\n    ]\n\n    let prev\n    this.meshables = []\n\n    this.dummies = canvas_data.map((obj, i) => {\n      const dummy = new CanvasDummy()\n      obj.image = obj.image || {}\n      if (obj.image.src) {\n      } else {\n      }\n\n      const addMesh = obj.image.src || false\n      obj.image.src = addMesh ? prev : src\n\n      if (addMesh) obj.mesh = addMesh\n\n      dummy.init(obj)\n\n      if (obj.image.src === prev) {\n        this.meshables.push(dummy)\n      }\n\n      prev = dummy.meshCanvas ? dummy.meshCanvas.output : dummy.canvas\n\n      return dummy\n    })\n\n    // throw new Error(\"STOP\")\n  }\n\n  refresh(img) {\n    const non_meshy = this.dummies.filter(dummy => {\n      return !dummy.meshCanvas\n    })\n\n    non_meshy.forEach((dummy, i) => {\n      dummy.values[0] = img\n      dummy.refresh(true)\n    })\n\n    this.meshables.forEach((dummy, i) => {\n      dummy.refresh(true)\n    })\n  }\n}\n\nexport default new CanvasDummyBuilder()\n","import React, { useEffect, useRef, useState } from \"react\"\nimport { traverseTwoPhase } from \"react-dom/test-utils\"\nimport GridManager from \"../../lib/GridManager\"\nimport CanvasDummyBuilder from \"../../lib/CanvasDummyBuilder\"\n\nimport \"./style.scss\"\n\nimport { Actions } from \"../../App\"\n\nconst Builder = React.forwardRef((props, ref) => {\n  const { sourceBitmapData, dispatch } = props\n\n  const guideRight = require(\"../../assets/guides/guide_right_32.jpg\").default\n  const guideLeft01 = require(\"../../assets/guides/guide_left_01_32.jpg\").default\n  const guideLeft02 = require(\"../../assets/guides/guide_left_02_32.jpg\").default\n\n  const images = useRef([guideRight, guideLeft01, guideLeft02]).current\n  const bitmapData = useRef(new Array(images.length).fill(null)).current\n\n  const [imageArray, setImageArray] = useState()\n  const [dummyIndex, setDummyIndex] = useState()\n  const [dummy, setDummy] = useState()\n  const [meshOpacity, setMeshOpacity] = useState(0)\n  const [transparency, setTransparency] = useState(false)\n  const [showDots, setShowDots] = useState(false)\n  const [wireframeOpacity, setWireframeOpacity] = useState(1)\n  const [iterations, setIterations] = useState(-1)\n  const prevIteration = useRef(iterations)\n  const [controlPoints, setControlPoints] = useState([])\n  const [hideControls, setHideControls] = useState(false)\n\n  const gridItems = useRef([]).current\n\n  const [forceUpdate, setForceUpdate] = useState()\n\n  const canvasHolder = useRef()\n  const dotsHolder = useRef()\n\n  useEffect(() => {\n    if (!imageArray) {\n      let completed = 0\n      function callback() {\n        if (++completed === images.length) {\n          // if (CanvasDummyBuilder.meshables[0].parent) {\n          // gridItems.current = CanvasDummyBuilder.meshables.map((dummy, i) => {\n          //   const gridManager = new GridManager()\n          //   const { parent } = dummy\n          //   gridManager.init(parent.width, parent.height, 2, 2)\n          //   CanvasDummyBuilder.meshables[i] = dummy.initMesh(gridManager)\n          //   return gridManager\n          // })\n          // }\n\n          setDummyIndex(2)\n        }\n      }\n\n      images.forEach((url, index) => {\n        const img = new Image()\n        img.src = url\n\n        bitmapData[index] = img\n\n        img.onload = callback\n      })\n    }\n  }, [imageArray])\n\n  useEffect(() => {\n    if (dummyIndex >= 0) {\n      setDummy(CanvasDummyBuilder.meshables[dummyIndex])\n    }\n  }, [dummyIndex])\n\n  useEffect(() => {\n    if (dummy) {\n      while (canvasHolder.current.childNodes.length)\n        canvasHolder.current.removeChild(canvasHolder.current.childNodes[0])\n\n      dummy.refresh()\n      // canvasHolder.current.appendChild(dummy.meshCanvas.filler)\n      canvasHolder.current.appendChild(dummy.meshCanvas.output)\n      canvasHolder.current.appendChild(dummy.meshCanvas.wireframe)\n\n      dummy.meshCanvas.output.style.opacity = meshOpacity\n      dummy.meshCanvas.wireframe.style.opacity = wireframeOpacity\n\n      console.log(\"calling iterations\")\n      setTimeout(updateIterations, 100)\n    }\n  }, [dummy])\n\n  useEffect(() => {\n    if (dummy) {\n      dummy.meshCanvas.output.style.opacity = meshOpacity\n    }\n  }, [meshOpacity])\n\n  useEffect(() => {\n    if (dummy) {\n      dummy.meshCanvas.wireframe.style.opacity = wireframeOpacity\n    }\n  }, [wireframeOpacity])\n\n  function updateIterations(add_or_subtract) {\n    let next\n    switch (add_or_subtract) {\n      case \"+\":\n      case \"add\":\n        next = Math.min(6, iterations + 1)\n        break\n      default:\n        next = Math.max(0, iterations - 1)\n        break\n    }\n\n    const square = Math.pow(2, next)\n\n    let cols = dummy.meshCanvas.gridManager.columns\n    let rows = dummy.meshCanvas.gridManager.rows\n\n    if (square > rows || square > cols) {\n      console.error(\"NOPE\")\n      return\n    }\n\n    updateControlPoints(next)\n    setIterations(next)\n\n    prevIteration.current = next\n  }\n\n  useEffect(() => {\n    if (dummy && iterations === 0 && prevIteration.current < 0) {\n      prevIteration.current = iterations\n      updateIterations()\n    }\n  }, [iterations])\n\n  function updateControlPoints(next) {\n    next = next >= 0 ? next : iterations\n    let cols = dummy.meshCanvas.gridManager.columns\n    let rows = dummy.meshCanvas.gridManager.rows\n\n    const square = Math.pow(2, next)\n\n    cols /= square\n    rows /= square\n\n    const cols1 = dummy.meshCanvas.gridManager.gCols\n    let viewPoints = []\n    dummy.meshCanvas.gridManager.positions.forEach(coord => {\n      coord.isControl = false\n    })\n    if (dummy.meshCanvas.gridManager.positions.length === 4) {\n      viewPoints = [0, 1, 2, 3]\n    } else {\n      for (let i = 0; i < dummy.meshCanvas.gridManager.positions.length; i += cols * cols1) {\n        let point = dummy.meshCanvas.gridManager.positions[i]\n        point.isControl = true\n        viewPoints.push(i)\n\n        for (let c = rows; c < cols1; c += rows) {\n          point = dummy.meshCanvas.gridManager.positions[i + c]\n          point.isControl = true\n          viewPoints.push(i + c)\n        }\n      }\n    }\n    dummy.meshCanvas.gridManager.setControlPoints(viewPoints)\n    setControlPoints(viewPoints)\n  }\n\n  useEffect(() => {\n    if (dummy) updateControlPoints()\n  }, [props.forceUpdate])\n\n  useEffect(() => {\n    if (dummy) dummy.meshCanvas.toggleColor(props.color)\n  }, [props.color])\n\n  function getControls(type) {\n    if (hideControls) return null\n    return (\n      <div className=\"controls\">\n        {/* <div className=\"button-holder\">\n          {CanvasDummyBuilder.meshables.map((ignore, index) => {\n            return (\n              <div\n                className=\"button\"\n                key={`button_${index}`}\n                onClick={() => {\n                  setDummyIndex(index)\n                  setDummy(CanvasDummyBuilder.meshables[index])\n                }}\n              >{`Show Canvas ${index}`}</div>\n            )\n          })}\n        </div> */}\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              setMeshOpacity(+!meshOpacity)\n            }}\n          >\n            <p>{`${!meshOpacity ? \"Show\" : \"Hide\"} Mesh Warp`}</p>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              setWireframeOpacity(+!wireframeOpacity)\n            }}\n          >\n            <p>{`${!wireframeOpacity ? \"Show\" : \"Hide\"} Wireframe`}</p>\n          </div>\n        </div>\n        {/* <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              setShowDots(!showDots)\n            }}\n          >\n            <p>{`${!showDots ? \"Show\" : \"Hide\"} Dots`}</p>\n          </div>\n        </div> */}\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              const next_opacity = meshOpacity === 1 ? 0.55 : 1\n              setTransparency(next_opacity)\n              setMeshOpacity(next_opacity)\n            }}\n          >\n            <p>Toggle Transparency</p>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div className=\"button-input\">\n            <div\n              className=\"button\"\n              onClick={() => {\n                dummy.updateQuantity(\"+\")\n                updateControlPoints(iterations)\n                setForceUpdate(Math.random())\n              }}\n            >\n              <p>Double Points</p>\n            </div>\n            <div\n              className=\"button\"\n              onClick={() => {\n                dummy.updateQuantity(\"-\")\n                updateControlPoints(iterations)\n                setForceUpdate(Math.random())\n              }}\n            >\n              <p>Half Points</p>\n            </div>\n          </div>\n          <div className=\"button-input\">\n            <p>{`Iterations: ${Math.pow(2, iterations)}`}</p>\n            <div\n              className=\"iterate-button\"\n              onClick={() => {\n                updateIterations(\"+\")\n              }}\n            >\n              +\n            </div>\n            <div\n              className=\"iterate-button\"\n              onClick={() => {\n                updateIterations(\"-\")\n              }}\n            >\n              -\n            </div>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              const attributes = [\"width\", \"height\", \"columns\", \"rows\"]\n              let output = `{ `\n              const gm = dummy.meshCanvas.gridManager\n              attributes.forEach(attribute => {\n                output += `\"${attribute}\": ${gm[attribute]} , `\n              })\n\n              output += `\"positions\": [ `\n              gm.positions.forEach((coord, index) => {\n                output += `{ \"x\": ${coord.x}, \"y\": ${coord.y}, \"i\": ${coord.i}, \"isControl\": ${coord.isControl ||\n                  false} }`\n                if (gm.positions[index + 1]) output += \", \"\n              })\n\n              output += `], \"rootPositions\": [ `\n              gm.rootPositions.forEach((coord, index) => {\n                output += `{ \"x\": ${coord.x}, \"y\": ${coord.y}, \"i\": ${coord.i} }`\n                if (gm.positions[index + 1]) output += \", \"\n              })\n\n              // output += `], \"viewPoints\": [ `\n              // controlPoints.forEach(index => {\n              //   output += index\n              //   if (gm.positions[index + 1]) output += \", \"\n              // })\n              output += \"]}\"\n\n              console.clear()\n              console.log(output)\n\n              // width: ${GridManager.width}, height: ${GridManager.height}, width: ${GridManager.width}, height: ${GridManager.height},  `\n            }}\n          >\n            <p>Output Points</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!dummy) return null\n\n  return (\n    <div className=\"builder\">\n      <div className=\"holder\">\n        <div\n          className=\"guide\"\n          style={{\n            width: dummy.meshCanvas.output.width + 200,\n            height: dummy.meshCanvas.output.height + 200,\n          }}\n        >\n          <img draggable={false} src={bitmapData[dummyIndex].src} alt={`guide`} />\n          <div className=\"canvas-holder\" ref={canvasHolder}></div>\n\n          <div\n            ref={dotsHolder}\n            id=\"dots-holder\"\n            className=\"dots-holder\"\n            onMouseDown={event => {\n              dispatch(event, Infinity, dummyIndex, dotsHolder.current)\n            }}\n            style={{\n              opacity: +(props.showDots === false ? false : showDots),\n              width: dummy.meshCanvas.output.width,\n              height: dummy.meshCanvas.output.height,\n            }}\n          >\n            <>\n              {controlPoints.map(index => {\n                return (\n                  <div\n                    onMouseDown={event => {\n                      dispatch(event, index, dummyIndex, dotsHolder.current, Math.pow(2, iterations))\n                    }}\n                    key={`dot_${index}`}\n                    className=\"grid-dot\"\n                    style={{\n                      left: dummy.meshCanvas.gridManager.positions[index].x,\n                      top: dummy.meshCanvas.gridManager.positions[index].y,\n                    }}\n                  >\n                    <div className=\"cross-01\" />\n                    <div className=\"cross-02\" />\n                    {/* <p>{index}</p> */}\n                  </div>\n                )\n              })}\n              {/* {dummy.meshCanvas.gridManager.positions\n                .filter((point, index) => !controlPoints.includes(index))\n                .map((point, index) => {\n                  return (\n                    <div\n                      key={`dot_${point.i}`}\n                      className=\"grid-dot-small\"\n                      style={{\n                        left: point.x,\n                        top: point.y,\n                      }}\n                    >\n                      <p>{point.i}</p>\n                    </div>\n                  )\n                })} */}\n            </>\n            {/* </div> */}\n          </div>\n        </div>\n      </div>\n      {getControls()}\n      <div\n        className=\"close-but\"\n        onClick={() => {\n          setHideControls(!hideControls)\n        }}\n      >\n        X\n      </div>\n    </div>\n  )\n})\n\nexport default Builder\n","import React, { useEffect, useRef, useState } from \"react\"\nimport CanvasDummyBuilder from \"../../lib/CanvasDummyBuilder\"\n\nimport { CanvasColoring } from \"@ff0000-ad-tech/ad-canvas\"\n\nimport \"./style.scss\"\n\nconst Status = {\n  NONE: null,\n  LOADING: \"Loading...\",\n  TEXTURE: \"Loading & Applying Texture...\",\n  TINTING: \"Tinting...\",\n  SATURATION: \"Saturation...\",\n  CONTRAST: \"Adding Contrast...\",\n}\n\nconst Preview = React.forwardRef((props, ref) => {\n  const { thumbs, layers } = props\n  const canvasRef = useRef()\n\n  const [selected, setSelected] = useState(0)\n\n  const [status, setStatus] = useState(Status.LOADING)\n\n  const update_status = async () => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve()\n      }, 500)\n    })\n  }\n\n  useEffect(async () => {\n    if (selected >= 0) {\n      setStatus(Status.TEXTURE)\n    }\n  }, [selected])\n\n  useEffect(async () => {\n    if (status !== undefined) {\n      let status_promise = update_status()\n      await status_promise\n\n      let next_status\n      switch (status) {\n        case Status.TEXTURE:\n          CanvasDummyBuilder.refresh(thumbs[selected])\n          const canvas = canvasRef.current\n          const ctx = canvas.getContext(\"2d\")\n\n          const { width, height } = canvas\n          ctx.clearRect(0, 0, width, height)\n\n          for (let i = layers.length - 1; i > -1; i--) {\n            const img = layers[i]\n            switch (i) {\n              case 0:\n                ctx.globalCompositeOperation = \"destination-atop\"\n                ctx.drawImage(img, 0, 0, width, height)\n                break\n              case 1:\n                ctx.drawImage(img, 0, 0, width, height)\n                break\n              case 2:\n                ctx.globalCompositeOperation = \"multiply\"\n                ctx.drawImage(img, 0, 0, width, height)\n                break\n              case 3:\n                ctx.globalCompositeOperation = \"multiply\"\n                ctx.drawImage(img, 0, 0, width, height)\n                break\n              case 4:\n                for (let i = 1; i > -1; i--) {\n                  ctx.drawImage(CanvasDummyBuilder.meshables[0].meshCanvas.filler, i, i, width, height)\n                  ctx.drawImage(CanvasDummyBuilder.meshables[0].meshCanvas.output, i, i, width, height)\n                }\n                break\n              case 5:\n                for (let i = 1; i > -1; i--) {\n                  ctx.drawImage(CanvasDummyBuilder.meshables[2].meshCanvas.filler, i, i, width, height)\n                  ctx.drawImage(CanvasDummyBuilder.meshables[2].meshCanvas.output, i, i, width, height)\n                }\n                break\n              default:\n                break\n            }\n            ctx.globalCompositeOperation = \"source-over\"\n          }\n          next_status = Status.TINTING\n\n          break\n\n        case Status.TINTING:\n          next_status = Status.SATURATION\n\n          CanvasColoring.tint({\n            target: canvasRef.current,\n            color: \"rgb(255, 255, 255)\",\n            amount: 0.0075,\n          })\n          break\n        case Status.SATURATION:\n          next_status = Status.CONTRAST\n\n          CanvasColoring.saturation({\n            target: canvasRef.current,\n            amount: 1.04,\n          })\n          break\n        case Status.CONTRAST:\n          next_status = Status.NONE\n\n          CanvasColoring.contrast({\n            target: canvasRef.current,\n            amount: 1.035,\n          })\n          break\n        default:\n          // Loading\n          break\n      }\n      if (next_status !== undefined) setStatus(next_status)\n    }\n  }, [status])\n\n  return (\n    <div className=\"container\">\n      <div className=\"preview\">\n        <div className=\"samples\">\n          {thumbs.map((img, i) => {\n            return (\n              <img\n                className={i === selected ? \"selected\" : \"\"}\n                src={img.src}\n                key={`${img.src}_${i}`}\n                alt={`thumbnail${i}`}\n                onClick={() => {\n                  setSelected(i)\n                }}\n              />\n            )\n          })}\n        </div>\n        <div className=\"preview-content\">\n          <canvas ref={canvasRef} width={1000} height={1000} />\n          {status && <div className=\"status\">{status}</div>}\n        </div>\n      </div>\n    </div>\n  )\n})\n\nexport default Preview\n","import React, { useEffect, useRef, useState } from \"react\"\nimport { traverseTwoPhase } from \"react-dom/test-utils\"\nimport useEffectOnce from \"../../hooks/useEffectOnce\"\n\nimport \"./style.scss\"\n\nconst Gridder = React.forwardRef((props, ref) => {\n  const images = useRef([])\n  const holder = useRef()\n  const amount = 32\n\n  const [bitmapData, setBitmapData] = useState([\"294x971\", \"297x974\", \"287x940\", \"728x1188\"])\n  const [status, setStatus] = useState(\"canvas\")\n\n  useEffectOnce(() => {\n    const images = bitmapData.map(dimensions => {\n      let [width, height] = dimensions.split(\"x\")\n\n      const canvas = document.createElement(\"canvas\")\n      canvas.width = width\n      canvas.height = height\n      const c = canvas.getContext(\"2d\")\n\n      let total = Math.pow(amount, 2)\n      width = canvas.width / amount\n      height = canvas.height / amount\n\n      let x = 0\n      let y = 0\n\n      for (let i = 0; i < total; i++) {\n        c.beginPath()\n        c.lineWidth = 1\n        c.strokeStyle = \"red\"\n        c.moveTo(x, y)\n        c.lineTo(x + width, y)\n        c.stroke()\n        c.closePath()\n\n        c.beginPath()\n        c.lineWidth = 1\n        c.strokeStyle = \"cyan\"\n        c.moveTo(x + width, y)\n        c.lineTo(x + width, y + height)\n        c.stroke()\n        c.closePath()\n\n        c.beginPath()\n        c.lineWidth = 1\n        c.strokeStyle = \"red\"\n        c.moveTo(x + width, y + height)\n        c.lineTo(x, y + height)\n        c.stroke()\n        c.closePath()\n\n        c.beginPath()\n        c.lineWidth = 1\n        c.strokeStyle = \"cyan\"\n        c.moveTo(x, y + height)\n        c.lineTo(x, y + height)\n        c.stroke()\n        c.closePath()\n\n        x += width\n\n        if (x >= canvas.width) {\n          x = 0\n          y += height\n        }\n      }\n\n      c.beginPath()\n      c.moveTo(0, 0)\n      c.lineTo(canvas.width, 0)\n      c.lineTo(canvas.width, canvas.height)\n      c.lineTo(0, canvas.height)\n      c.lineTo(0, 0)\n      c.lineWidth *= 2\n\n      c.stroke()\n      c.closePath()\n\n      return canvas.toDataURL(\"image/png\")\n    })\n\n    setBitmapData(images)\n    setStatus(\"image\")\n  })\n\n  useEffect(() => {\n    if (status === \"image\") {\n      let i = 0\n      const images = []\n      function loadImage(i) {\n        var img = new Image()\n        img.src = bitmapData[i]\n\n        img.onload = function() {\n          images.push(img.src)\n          if (i < bitmapData.length - 1) {\n            loadImage(++i)\n          } else {\n            setBitmapData(images)\n            setStatus(\"done\")\n          }\n        }\n      }\n      loadImage(0)\n    }\n    // else if (status === \"done\") {\n    //   while (holder.current.childNodes.length) holder.current.removeChild(holder.current.childNodes[0])\n    //   bitmapData.forEach((img, i) => {\n    //     holder.current.appendChild(img)\n    //   })\n    // }\n  }, [status])\n\n  return (\n    <div className=\"gridder\">\n      {status !== \"done\" ? (\n        <p>Loading.</p>\n      ) : (\n        bitmapData.map((src, i) => {\n          return <img src={src} key={`img_${i}`} />\n        })\n      )}\n    </div>\n  )\n})\n\nexport default Gridder\n","import { useEffect, useRef } from 'react'\n\nexport default function useEffectOnce(callback) {\n\tconst usedOnce = useRef(false)\n\n\tuseEffect(() => {\n\t\tif (!usedOnce.current) {\n\t\t\tif (callback) callback()\n\t\t\tusedOnce.current = true\n\t\t}\n\t})\n}\n","export default __webpack_public_path__ + \"static/media/version06.f52aac51.jpg\";","export default __webpack_public_path__ + \"static/media/version08.31dacfa6.jpg\";","export default __webpack_public_path__ + \"static/media/version09.5f8a70c4.jpg\";","export default __webpack_public_path__ + \"static/media/version10.2d8e46da.jpg\";","import React, { useEffect, useRef, useState } from \"react\"\n\nimport \"./style.scss\"\n\n// import img01 from \"../../assets/comps/version01.jpg\"\n// import img02 from \"../../assets/comps/version02.jpg\"\n// import img03 from \"../../assets/comps/version03.jpg\"\n// import img04 from \"../../assets/comps/version04.jpg\"\n// import img05 from \"../../assets/comps/version05.jpg\"\nimport img06 from \"../../assets/comps/version06.jpg\"\n// import img07 from \"../../assets/comps/version07.jpg\"\nimport img08 from \"../../assets/comps/version08.jpg\"\nimport img09 from \"../../assets/comps/version09.jpg\"\nimport img10 from \"../../assets/comps/version10.jpg\"\n\nconst Comps = React.forwardRef((props, ref) => {\n  const images = [img06, img08, img09, img10]\n\n  const [compIndex, setCompIndex] = useState(0)\n  const [hoverIndex, setHoverIndex] = useState(null)\n\n  function getIndex() {\n    let value = (hoverIndex !== null ? hoverIndex : compIndex) + 6\n    console.log(`%c ${value}`, \"color: black; background-color: cyan; font-style: italic; padding: 2px;\")\n    if (value > 6) value++\n    return value\n  }\n\n  return (\n    <div className=\"comp-container\">\n      <div className=\"comp-preview\">\n        <div className=\"preview-holder\">\n          <img alt=\"preview_1\" src={images[compIndex]} />\n          {hoverIndex !== null ? <img alt=\"preview_2\" src={images[hoverIndex]} /> : null}\n          <p>{`Version ${getIndex()}${getIndex() === 6 ? \" (original client PSD)\" : \"\"}`}</p>\n        </div>\n      </div>\n      <div className=\"comp-samples\">\n        {images.map((src, i) => {\n          return (\n            <div>\n              <p>{`thumb ${i < 1 ? i + 6 : i + 7}`}</p>\n\n              <img\n                className={i === compIndex ? \"comp-selected\" : \"\"}\n                src={src}\n                key={`${src}_${i}`}\n                alt={`thumbnail${i}`}\n                onMouseOver={() => {\n                  if (i !== compIndex) setHoverIndex(i)\n                }}\n                onMouseOut={() => {\n                  if (i !== compIndex) setHoverIndex(null)\n                }}\n                onClick={() => {\n                  setCompIndex(i)\n                  setHoverIndex(null)\n                }}\n              />\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n})\n\nexport default Comps\n","/*\n\nMAIN COMP:\n  Comp: 1000x1000\n  Guide: 1200x1200\n\n\nRIGHT SOCK:\n  Canvas 1 (lives on main comp):\n    294x971\n      Bitmap Data Drawn into Canvas:\n        x: -4, y: -2\n        590x975\n\nLEFT SOCK:\n  Canvas 1 (initial warping used in Canvas 2):\n    297x974\n      Bitmap Data Drawn into Canvas:\n        x: -293 (Align.RIGHT), y: -1\n        590x975\n      Guide:\n        487x1140\n  Canvas 2 (lives on main comp, warps Canvas 1):\n    287x940\n*/\n\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { Router, Route, Switch, withRouter } from \"react-router-dom\"\nimport history from \"./history.js\"\n\nimport Builder from \"./components/Builder\"\nimport Preview from \"./components/Preview\"\nimport Gridder from \"./components/Gridder\"\nimport Comps from \"./components/Comps\"\n\nimport CanvasDummyBuilder from \"./lib/CanvasDummyBuilder\"\n\nimport \"./App.scss\"\n\nexport const Actions = {\n  MOUSE_DOWN: \"mousedown\",\n  MOUSE_UP: \"mouseup\",\n  MOUSE_MOVE: \"mousemove\",\n  KEY_DOWN: \"keydown\",\n  KEY_UP: \"keyup\",\n}\n\nexport default function App() {\n  const [bodyRef, setBody] = useState()\n\n  const dotIndexRef = useRef()\n  const boundingRect = useRef()\n  const mouseDownPos = useRef()\n  const mouseCurPos = useRef()\n  const iterationsRef = useRef()\n  const [forceUpdate, setForceUpdate] = useState()\n\n  const assets = [\n    // require(\"./assets/textures/asset_01a.jpg\").default,\n    require(\"./assets/textures/asset_01.jpg\").default,\n    require(\"./assets/textures/asset_02.jpg\").default,\n    require(\"./assets/textures/asset_03.jpg\").default,\n    require(\"./assets/textures/asset_04.jpg\").default,\n    require(\"./assets/textures/asset_bp2.jpg\").default,\n    require(\"./assets/textures/asset_looney2.jpg\").default,\n    require(\"./assets/textures/asset_tmnt2.jpg\").default,\n    // require(\"./assets/textures/grids_01.jpg\").default,\n    // require(\"./assets/textures/grids_02.jpg\").default,\n  ]\n  const assetData = useRef([])\n  const [shiftState, setShiftState] = useState(false)\n  const shiftDown = useRef(false)\n  const [mouseDown, setMouseDown] = useState(false)\n\n  const layers = [\n    require(\"./assets/layers/layer_03_base.png\").default,\n    require(\"./assets/layers/layer_01.png\").default,\n    require(\"./assets/layers/layer_02_multiply.png\").default,\n    require(\"./assets/layers/layer_03_base_02.png\").default,\n    require(\"./assets/layers/sock_mask_left.png\").default,\n    require(\"./assets/layers/sock_mask_right.png\").default,\n  ]\n  const layerData = useRef([])\n\n  // const whatever = useRef()\n\n  const [sourceBitmapData, setSourceBitmapData] = useState()\n\n  const canvasHolder = useRef()\n\n  const gridTarget = useRef()\n\n  function handleKeyEvents(event) {\n    if (event.keyCode === 16) {\n      let next\n      switch (event.type) {\n        // case Actions.KEY_DOWN:\n        //   mouseDownPos.current = {\n        //     ...mouseCurPos.current,\n        //   }\n        //   next = true\n        //   break\n        case Actions.KEY_UP:\n          shiftDown.current = !shiftDown.current\n          setShiftState(shiftDown.current)\n          // next = false\n          break\n        default:\n          break\n      }\n      // if (next !== null) {\n      //   shiftDown.current = next\n      //   setShiftState(next)\n      //   // event.target.style.cursor = next ? \"none\" : \"default\"\n      // }\n    }\n  }\n\n  ////////////////////////////////////////////////////////////\n\n  function handleMouseEvent(event, index, dummyIndex, parent, iterations) {\n    event.preventDefault()\n    event.stopPropagation()\n    switch (event.type) {\n      case Actions.MOUSE_DOWN:\n        if (index === Infinity) return\n\n        bodyRef.addEventListener(Actions.MOUSE_MOVE, handleMouseEvent, false)\n        bodyRef.addEventListener(Actions.MOUSE_UP, handleMouseEvent, false)\n        bodyRef.style.cursor = \"none\"\n        gridTarget.current = dummyIndex\n        dotIndexRef.current = index\n        boundingRect.current = parent.getBoundingClientRect()\n        iterationsRef.current = iterations\n\n        mouseDownPos.current = {\n          x: event.pageX,\n          y: event.pageY,\n        }\n        setMouseDown(true)\n\n        break\n      case Actions.MOUSE_UP:\n        bodyRef.removeEventListener(Actions.MOUSE_MOVE, handleMouseEvent, false)\n        bodyRef.removeEventListener(Actions.MOUSE_UP, handleMouseEvent, false)\n        bodyRef.style.cursor = \"default\"\n        gridTarget.current = null\n        dotIndexRef.current = null\n        boundingRect.current = null\n        mouseDownPos.current = null\n        setMouseDown(false)\n        break\n      case Actions.MOUSE_MOVE:\n        const targetMeshable = CanvasDummyBuilder.meshables[gridTarget.current]\n\n        // Infinity means move everything as a large group\n        // if (dotIndexRef.current === Infinity) {\n        //   targetMeshable.meshCanvas.gridManager.positions.forEach((coord, i) => {\n        //     // console.log(i, targetMeshable.updateDot)\n        //     targetMeshable.updateDot(\n        //       i,\n        //       coord.x - (downX - event.pageX),\n        //       coord.y - (downY - event.pageY),\n        //       iterations\n        //     )\n        //   })\n        //   mouseDownPos.current = {\n        //     x: event.pageX,\n        //     y: event.pageY,\n        //   }\n        // } else {\n        if (dotIndexRef.current === Infinity) return\n\n        // const sub = 5\n        const sub = shiftState ? 7 : 1\n        const { x: downX, y: downY } = mouseDownPos.current\n        const { x: boundX, y: boundY } = boundingRect.current\n\n        const nextX = downX - boundX - document.documentElement.scrollLeft + (event.pageX - downX) / sub\n        const nextY = downY - boundY - document.documentElement.scrollTop + (event.pageY - downY) / sub\n        targetMeshable.updateDot(\n          dotIndexRef.current,\n          nextX,\n          nextY,\n          // event.pageX - boundX,\n          // event.pageY - boundY - document.documentElement.scrollTop,\n          iterationsRef.current\n        )\n        mouseCurPos.current = {\n          x: event.pageX,\n          y: event.pageY,\n        }\n        // }\n        setForceUpdate(Math.random())\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (!bodyRef) {\n      const ref = document.getElementsByTagName(\"body\")[0]\n      // ref.addEventListener(Actions.KEY_DOWN, handleKeyEvents, false)\n      ref.addEventListener(Actions.KEY_UP, handleKeyEvents, false)\n      setBody(ref)\n    }\n  }, [bodyRef])\n\n  ////////////////////////////////////////////////////////////\n  useEffect(() => {\n    if (!sourceBitmapData) {\n      let completed = 0\n      function callback() {\n        if (++completed === assets.length + layers.length) {\n          const img = assetData.current[0]\n\n          // setTimeout(() => {\n          setSourceBitmapData(img)\n          // }, 1000)\n          CanvasDummyBuilder.init(img)\n        }\n      }\n\n      assets.forEach((url, i) => {\n        const img = new Image()\n        img.src = url\n\n        img.onload = () => {\n          assetData.current[i] = img\n          callback()\n        }\n      })\n      layers.forEach((url, i) => {\n        const img = new Image()\n        img.src = url\n\n        img.onload = () => {\n          layerData.current[i] = img\n          callback()\n        }\n      })\n    }\n  }, [sourceBitmapData])\n\n  if (!sourceBitmapData) return <div className=\"loading\">LOADING!</div>\n\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route\n          path=\"/comps\"\n          // path=\"/\"\n          render={props => <Comps />}\n        />\n        <Route\n          path=\"/grid\"\n          // path=\"/\"\n          render={props => <Gridder />}\n        />\n        <Route\n          path=\"/admin\"\n          // path=\"/\"\n          render={props => {\n            return (\n              <Builder\n                sourceBitmapData={sourceBitmapData}\n                dispatch={handleMouseEvent}\n                forceUpdate={forceUpdate}\n                showDots={!mouseDown}\n                color={shiftState}\n              />\n            )\n          }}\n        />\n        <Route path=\"\" render={props => <Preview thumbs={assetData.current} layers={layerData.current} />} />\n      </Switch>\n    </Router>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\n// ReactDOM.render(\n// \t<React.StrictMode>\n// \t\t<App />\n// \t</React.StrictMode>,\n// \tdocument.getElementById('root')\n// )\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}