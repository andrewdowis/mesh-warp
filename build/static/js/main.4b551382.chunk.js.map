{"version":3,"sources":["assets/guides/guide_right_32x32.jpg","assets/guides/guide_left_01_32x32.jpg","assets/guides/guide_left_02_32x32.jpg","history.js","lib/GridManager.js","lib/MeshCanvas.js","lib/CanvasDummy.js","lib/CanvasDummyBuilder.js","assets/comps/version1.jpg","assets/comps/version2.jpg","assets/comps/version3.jpg","assets/comps/version4.jpg","assets/comps/version5.jpg","assets/comps/version6.jpg","assets/comps/version7.jpg","assets/comps/version8.jpg","components/Comps/index.js","App.js","reportWebVitals.js","index.js"],"names":["createBrowserHistory","GridManager","width","height","rows","columns","rootPositions","positions","this","build","makePoints","x","y","indexes","forEach","index","length","add_or_subtract","new_points","old_points","new_points_01_columns","new_points_02_rows","new_points_03_square","i","gCols","push","getAverage","direction","col_total","pushNew","array1","array2","nextValue","shift","gRows","c","coord","colWidth","rowHeight","make_positions","total","Math","floor","corners","tl","tr","bl","br","square","makeGo","max","squareValue","checks","undefined","props","divisions","amount","pow","center","moveUpperLeft","moveUpperRight","moveLowerRight","moveLowerLeft","double","corner","item","opposite","hypoten","adjacent","moveCommon","mid1","mid2","avg","adjacentPos","hypotenPos","oppositePos","centerPos","array","controlPoints","map","MeshCanvas","image","gridManager","output","document","createElement","id","filler","wireframe","src","refresh","ctx_wireframe","getContext","clearRect","strokeStyle","lineWidth","neighbor","beginPath","upper","moveTo","lineTo","stroke","closePath","r1","s1","t1","r2","s2","t2","r3","s3","t3","parseFloat","a","b","showFiller","canvi","img","gm","w","h","subwidth","subheight","target","rewind_amount","skip_amount","canvas","ctx","offset","console","log","c1","c2","c3","c4","rootX","rootY","x1","y1","x2","y2","x3","y3","x4","y4","xn","linearSolution","yn","save","setTransform","fillStyle","fill","clip","drawImage","restore","xm","ym","meshify","updateMeshLines","updateQuantity","CanvasDummy","data","mesh","image_width","image_height","values","parent","initMesh","init","meshCanvas","iterations","updateDot","prev","canvas_data","right_sock","left_sock_01","left_sock_02","meshables","dummies","obj","dummy","addMesh","filter","Comps","React","forwardRef","ref","images","img1","img2","img3","img4","img5","img6","img7","img8","useState","compIndex","setCompIndex","hoverIndex","setHoverIndex","getIndex","className","alt","onMouseOver","onMouseOut","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4b551382.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/guide_right_32x32.7eb73762.jpg\";","export default __webpack_public_path__ + \"static/media/guide_left_01_32x32.bb78e996.jpg\";","export default __webpack_public_path__ + \"static/media/guide_left_02_32x32.2299648c.jpg\";","import { createBrowserHistory } from \"history\"\n\nexport default createBrowserHistory()\n","export default class GridManager {\n  init({ width, height, rows, columns, rootPositions, positions }) {\n    if (!this.build) {\n      this.build = true\n      this.width = width\n      this.height = height\n      this.rows = rows\n      this.columns = columns\n\n      this.makePoints(rootPositions, positions)\n    }\n  }\n\n  getAverage(...indexes) {\n    let x = 0\n    let y = 0\n    indexes.forEach(index => {\n      x += this.positions[index].x\n      y += this.positions[index].y\n    })\n    x /= indexes.length\n    y /= indexes.length\n\n    return { x, y }\n  }\n\n  updateQuantity(add_or_subtract) {\n    let new_points = []\n    switch (add_or_subtract) {\n      case \"+\":\n      case \"add\":\n        const old_points = this.positions\n        const new_points_01_columns = []\n        const new_points_02_rows = []\n        const new_points_03_square = []\n\n        for (let i = 0; i < old_points.length; i++) {\n          if (i + this.gCols < old_points.length) new_points_02_rows.push(this.getAverage(i, i + this.gCols))\n          if (i % this.gCols !== this.columns) {\n            if (i + 1 < old_points.length) new_points_01_columns.push(this.getAverage(i, i + 1))\n            if (i + this.gCols < old_points.length)\n              new_points_03_square.push(this.getAverage(i, i + 1, i + this.gCols, i + this.gCols + 1))\n          }\n        }\n\n        let direction = \"across\"\n        const col_total = this.columns + this.gCols\n        function pushNew(array1, array2, nextValue) {\n          for (let i = 0; i < col_total; i++) {\n            if (i % 2) {\n              new_points.push(array1.shift())\n            } else {\n              new_points.push(array2.shift())\n            }\n\n            new_points[new_points.length - 1].i = new_points.length - 1\n            if (i === col_total - 1) direction = nextValue\n          }\n        }\n        while (\n          old_points.length +\n          new_points_01_columns.length +\n          new_points_02_rows.length +\n          new_points_03_square.length\n        ) {\n          switch (direction) {\n            case \"across\":\n              pushNew(new_points_01_columns, old_points, \"middle\")\n              break\n            case \"middle\":\n              pushNew(new_points_03_square, new_points_02_rows, \"across\")\n\n              break\n            default:\n              break\n          }\n        }\n\n        this.columns *= 2\n        this.rows *= 2\n        break\n      case \"-\":\n      case \"subtract\":\n        let modulo = 1\n\n        for (let i = 0; i < this.gRows; i += 2) {\n          for (let c = 0; c < this.gCols; c += 2) {\n            const index = i * this.gCols + c\n            let coord = this.positions[index]\n            coord.i = index\n            new_points.push(coord)\n          }\n        }\n        // new_points = this.positions.filter((coord, i) => {\n        //   if (i % this.gCols === 0) modulo = +!modulo\n        //   return i % 2 === modulo\n        // })\n\n        // console.log(this.positions)\n        // console.log(new_points)\n\n        this.columns /= 2\n        this.rows /= 2\n        break\n      default:\n        break\n    }\n\n    this.gCols = this.columns + 1\n    this.gRows = this.rows + 1\n\n    this.positions = new_points\n\n    this.makePoints()\n  }\n\n  makePoints(rootPositions, positions) {\n    const colWidth = this.width / this.columns\n    const rowHeight = this.height / this.rows\n\n    this.gCols = this.columns + 1\n    this.gRows = this.rows + 1\n\n    if (positions && rootPositions) {\n      this.positions = positions\n      this.rootPositions = rootPositions\n    } else {\n      const total = this.gRows * this.gCols\n      this.rootPositions = []\n      let make_positions\n      if (!this.positions) {\n        this.positions = []\n        make_positions = true\n      }\n      if (!this.rootPositions.length) {\n        for (let i = 0; i < total; i++) {\n          if (make_positions)\n            this.positions.push({\n              x: (i % this.gCols) * colWidth,\n              y: Math.floor(i / this.gCols) * rowHeight,\n              i,\n            })\n          this.rootPositions.push({\n            x: (i % this.gCols) * colWidth,\n            y: Math.floor(i / this.gCols) * rowHeight,\n            i,\n          })\n        }\n      }\n    }\n    this.corners = {\n      tl: 0,\n      tr: this.rows,\n      bl: this.gCols * this.rows,\n      br: this.gCols * this.rows + this.rows,\n    }\n  }\n\n  updateDot(i, x, y, square) {\n    this.positions[i] = {\n      x,\n      y,\n      i,\n    }\n\n    this.makeGo(i, square, this.columns / Math.max(1, square / 2))\n  }\n\n  makeGo(index, squareValue, checks) {\n    if (checks <= 1 || index === null || index === undefined || !(index >= 0)) return\n\n    const props = {\n      divisions: this.columns / squareValue,\n      amount: Math.pow(this.columns, 2) / squareValue,\n      center: index,\n    }\n    const corners = [\n      this.moveUpperLeft(props),\n      this.moveUpperRight(props),\n      this.moveLowerRight(props),\n      this.moveLowerLeft(props),\n    ]\n\n    const double = squareValue * 2\n    corners.forEach(corner => {\n      for (let item in corner) this.makeGo(corner[item], double, checks / 2)\n    })\n  }\n\n  moveLowerLeft({ divisions, amount, center }) {\n    if (center % this.gCols === 0) return\n\n    // to the left or the right\n    let opposite = center - divisions\n    // across in a corner\n    let hypoten = center + amount\n    // above or below\n    let adjacent = hypoten + divisions\n\n    return this.moveCommon({ center, opposite, adjacent, hypoten })\n  }\n  moveLowerRight({ divisions, amount, center }) {\n    if ((center + 1) % this.gCols === 0) return\n\n    // to the left or the right\n    let opposite = center + divisions\n    // above or below\n    let adjacent = opposite + amount\n    // across in a corner\n    let hypoten = adjacent + divisions\n\n    return this.moveCommon({ center, opposite, adjacent, hypoten })\n  }\n  moveUpperRight({ divisions, amount, center }) {\n    if ((center + 1) % this.gCols === 0) return\n    // to the left or the right\n    let opposite = center + divisions\n    // across in a corner\n    let hypoten = center - amount\n    // above or below\n    let adjacent = hypoten - divisions\n\n    return this.moveCommon({ center, opposite, adjacent, hypoten })\n  }\n\n  moveUpperLeft({ divisions, amount, center }) {\n    if (center % this.gCols === 0) return\n\n    // to the left or the right\n    let opposite = center - divisions\n    // above or below\n    let adjacent = opposite - amount\n    // across in a corner\n    let hypoten = adjacent - divisions\n\n    return this.moveCommon({ center, opposite, adjacent, hypoten })\n  }\n\n  moveCommon({ center, opposite, adjacent, hypoten }) {\n    let mid1 = (center + adjacent) / 2\n    let mid2 = (center + opposite) / 2\n\n    let avg = (adjacent + opposite) / 2\n\n    let adjacentPos = this.positions[adjacent]\n    let hypotenPos = this.positions[hypoten]\n    let oppositePos = this.positions[opposite]\n\n    let centerPos = this.positions[center]\n    if (\n      adjacentPos &&\n      centerPos &&\n      hypotenPos &&\n      oppositePos &&\n      this.positions[avg] &&\n      this.positions[mid1] &&\n      this.positions[mid2]\n    ) {\n      this.positions[avg] = {\n        x: (adjacentPos.x + oppositePos.x + hypotenPos.x + centerPos.x) / 4,\n        y: (adjacentPos.y + oppositePos.y + hypotenPos.y + centerPos.y) / 4,\n        i: avg,\n      }\n\n      this.positions[mid1] = {\n        x: (centerPos.x + adjacentPos.x) / 2,\n        y: (centerPos.y + adjacentPos.y) / 2,\n        i: mid1,\n      }\n      this.positions[mid2] = {\n        x: (centerPos.x + oppositePos.x) / 2,\n        y: (centerPos.y + oppositePos.y) / 2,\n        i: mid2,\n      }\n    }\n\n    return { avg, mid1, mid2, center }\n  }\n\n  setControlPoints(array) {\n    this.controlPoints = array.map(index => index)\n  }\n}\n","import { MathUtils } from \"@ff0000-ad-tech/ad-utils\"\nimport { getAnglePoint } from \"@ff0000-ad-tech/ad-utils/lib/MathUtils\"\n\nconst getAverage = (...numbers) => {\n  let number = 0\n  numbers.forEach(num => (number += num))\n  return number / numbers.length\n}\n\nconst averagePoints = (...points) => {\n  let newPoint = { x: 0, y: 0 }\n  points.forEach(point => {\n    newPoint.x += point.x\n    newPoint.y += point.y\n  })\n  return {\n    x: newPoint.x / points.length,\n    y: newPoint.y / points.length,\n  }\n}\n\nexport default class MeshCanvas {\n  init(width, height, image, gridManager) {\n    this.output = document.createElement(\"canvas\")\n    this.output.id = `output`\n\n    this.filler = document.createElement(\"canvas\")\n    this.filler.id = `filler`\n\n    this.wireframe = document.createElement(\"canvas\")\n    this.wireframe.id = `wireframe`\n\n    this.output.width = width\n    this.output.height = height\n\n    this.filler.width = width\n    this.filler.height = height\n\n    this.wireframe.width = width\n    this.wireframe.height = height\n\n    this.src = image\n\n    this.gridManager = gridManager\n\n    this.refresh()\n  }\n\n  updateMeshLines() {\n    // update the mesh lines\n    let ctx_wireframe = this.wireframe.getContext(\"2d\")\n\n    ctx_wireframe.clearRect(0, 0, this.wireframe.width, this.wireframe.height)\n    ctx_wireframe.strokeStyle = \"red\"\n    ctx_wireframe.lineWidth = 1.5\n    for (let i = 0; i < this.gridManager.positions.length; i++) {\n      const coord = this.gridManager.positions[i]\n      let neighbor = this.gridManager.positions[i + 1]\n      if (i && (i + 1) % this.gridManager.gCols === 0) neighbor = null\n      ctx_wireframe.beginPath()\n      if (i >= this.gridManager.gCols) {\n        const upper = this.gridManager.positions[i - this.gridManager.columns - 1]\n        ctx_wireframe.moveTo(upper.x, upper.y)\n        ctx_wireframe.lineTo(coord.x, coord.y)\n      } else {\n        ctx_wireframe.moveTo(coord.x, coord.y)\n      }\n      if (neighbor) ctx_wireframe.lineTo(neighbor.x, neighbor.y)\n      ctx_wireframe.stroke()\n      ctx_wireframe.closePath()\n    }\n\n    // ctx_wireframe.strokeStyle = \"orange\"\n    // ctx_wireframe.lineWidth = 0.5\n    // for (let i = 0; i < this.gridManager.positions.length; i++) {\n    //   if (i % this.gridManager.gCols === 0) continue\n\n    //   const coord = this.gridManager.positions[i]\n    //   let neighbor = this.gridManager.positions[i + this.gridManager.columns]\n\n    //   if (!neighbor) break\n\n    //   ctx_wireframe.beginPath()\n    //   ctx_wireframe.moveTo(coord.x, coord.y)\n    //   ctx_wireframe.lineTo(neighbor.x, neighbor.y)\n\n    //   ctx_wireframe.stroke()\n    //   ctx_wireframe.closePath()\n    // }\n\n    // console.warn(this.gridManager.controlPoints)\n    // if (this.gridManager.controlPoints) {\n    // }\n  }\n\n  linearSolution(r1, s1, t1, r2, s2, t2, r3, s3, t3) {\n    // make them all floats\n    r1 = parseFloat(r1)\n    s1 = parseFloat(s1)\n    t1 = parseFloat(t1)\n    r2 = parseFloat(r2)\n    s2 = parseFloat(s2)\n    t2 = parseFloat(t2)\n    r3 = parseFloat(r3)\n    s3 = parseFloat(s3)\n    t3 = parseFloat(t3)\n\n    let a = ((t2 - t3) * (s1 - s2) - (t1 - t2) * (s2 - s3)) / ((r2 - r3) * (s1 - s2) - (r1 - r2) * (s2 - s3))\n    let b = ((t2 - t3) * (r1 - r2) - (t1 - t2) * (r2 - r3)) / ((s2 - s3) * (r1 - r2) - (s1 - s2) * (r2 - r3))\n    let c = t1 - r1 * a - s1 * b\n\n    return [a, b, c]\n  }\n\n  meshify(showFiller = false) {\n    const canvi = [this.output]\n    if (showFiller) canvi.push(this.filler)\n    // console.log(`%c ${showFiller}`, \"color: black; background-color: cyan; font-style: italic; padding: 2px;\")\n    let img = this.src\n\n    let gm = this.gridManager\n    let { columns, rows } = gm\n    let w = canvi[0].width\n    let h = canvi[0].height\n\n    let subwidth = img.width / columns\n    let subheight = img.height / rows\n\n    const target = gm.positions.length - 1 - columns - 2\n    const rewind_amount = columns + 1\n    const skip_amount = rewind_amount * rows - 1\n\n    canvi.forEach((canvas, c) => {\n      let ctx = canvas.getContext(\"2d\")\n\n      const offset = c * 4\n\n      ctx.clearRect(0, 0, w, h)\n      // render the images\n\n      for (let i = target; i > -1; i -= rewind_amount) {\n        // console.log(c, i)\n        console.log()\n        const c1 = gm.positions[i]\n        const c2 = gm.positions[i + 1]\n        const c3 = gm.positions[i + 1 + columns]\n        const c4 = gm.positions[i + 2 + columns]\n\n        let { x: rootX, y: rootY } = gm.rootPositions[i]\n\n        let x1 = c1.x + offset\n        let y1 = c1.y + offset\n        let x2 = c2.x + offset\n        let y2 = c2.y + offset\n        let x3 = c3.x + offset\n        let y3 = c3.y + offset\n        let x4 = c4.x + offset\n        let y4 = c4.y + offset\n\n        // the bottom-right face\n        let xn = this.linearSolution(subwidth, subheight, x4, subwidth, 0, x2, 0, subheight, x3)\n        let yn = this.linearSolution(subwidth, subheight, y4, subwidth, 0, y2, 0, subheight, y3)\n\n        ctx.save()\n        ctx.setTransform(xn[0], yn[0], xn[1], yn[1], xn[2], yn[2])\n        ctx.beginPath()\n        ctx.moveTo(subwidth, subheight)\n        ctx.lineTo(subwidth, 0)\n        ctx.lineTo(0, subheight)\n        ctx.closePath()\n        ctx.fillStyle = \"transparent\"\n        // ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"\n        // ctx.fillStyle = \"blue\"\n        ctx.fill()\n        ctx.clip()\n        ctx.drawImage(img, rootX, rootY, subwidth, subheight, 0, 0, subwidth, subheight)\n\n        ctx.restore()\n\n        // the top-left face\n        let xm = this.linearSolution(0, 0, x1, subwidth, 0, x2, 0, subheight, x3)\n        let ym = this.linearSolution(0, 0, y1, subwidth, 0, y2, 0, subheight, y3)\n\n        ctx.save()\n        ctx.setTransform(xm[0], ym[0], xm[1], ym[1], xm[2], ym[2])\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(subwidth, 0)\n        ctx.lineTo(0, subheight)\n        ctx.closePath()\n        ctx.fillStyle = \"transparent\"\n        // ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"\n        // ctx.fillStyle = \"blue\"\n        ctx.fill()\n        // ctx.clip/()\n        ctx.drawImage(img, rootX, rootY, subwidth, subheight, 0, 0, subwidth, subheight)\n        ctx.restore()\n\n        if (i && i - rewind_amount < 0) i += skip_amount\n      }\n    })\n  }\n\n  refresh(showFiller = false) {\n    this.meshify(showFiller)\n    this.updateMeshLines()\n  }\n\n  updateQuantity(add_or_subtract) {\n    this.gridManager.updateQuantity(add_or_subtract)\n  }\n}\n","import GridManager from \"./GridManager\"\nimport MeshCanvas from \"./MeshCanvas\"\n\nexport default class CanvasDummy {\n  init(props) {\n    const { width, height, image, id, data, mesh } = props\n\n    const { src, x, y, width: image_width, height: image_height } = image\n\n    this.id = id\n\n    this.values = [src, x || 0, y || 0, image_width || src.width, image_height || src.height]\n    this.parent = src\n\n    if (mesh) {\n      this.initMesh(width, height, data)\n    } else {\n      this.canvas = document.createElement(\"canvas\")\n      this.canvas.id = `dummy_canvas_${id}`\n\n      this.canvas.width = width\n      this.canvas.height = height\n      const ctx = this.canvas.getContext(\"2d\")\n\n      ctx.drawImage(...this.values)\n    }\n\n    // document.getElementsByTagName(\"body\").appendChild(canvas)\n  }\n\n  initMesh(width, height, data) {\n    const gridManager = new GridManager()\n\n    // data = null\n    let thing = true\n    // thing = false\n    if (thing) {\n      data = data || {\n        width: this.parent.width,\n        height: this.parent.height,\n        columns: 2,\n        rows: 2,\n      }\n    } else {\n      data = data || {\n        width: this.parent.width,\n        height: this.parent.height,\n        columns: 4,\n        rows: 4,\n      }\n    }\n\n    gridManager.init(data)\n\n    this.meshCanvas = new MeshCanvas()\n    this.meshCanvas.init(width, height, this.parent, gridManager)\n\n    // this.parentDummy = parentDummy\n  }\n\n  updateQuantity(add_or_subtract) {\n    this.meshCanvas.updateQuantity(add_or_subtract)\n    this.refresh()\n  }\n\n  updateDot(index, x, y, iterations) {\n    this.meshCanvas.gridManager.updateDot(index, x, y, iterations)\n    this.meshCanvas.refresh()\n  }\n\n  refresh(showFiller = false) {\n    if (this.meshCanvas) {\n      this.meshCanvas.refresh(showFiller)\n    } else {\n      let ctx = this.canvas.getContext(\"2d\")\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      ctx.drawImage(...this.values)\n    }\n  }\n}\n","import CanvasDummy from \"./CanvasDummy\"\n\nimport right_sock from \"../data/right_sock.json\"\nimport left_sock_01 from \"../data/left_sock_01.json\"\nimport left_sock_02 from \"../data/left_sock_02.json\"\n\nclass CanvasDummyBuilder {\n  init(src) {\n    const canvas_data = [\n      {\n        id: \"right_sock_source\",\n        width: 294,\n        height: 971,\n        image: {\n          x: -4,\n          y: -2,\n          width: 590,\n          height: 975,\n        },\n      },\n      {\n        id: \"right_sock_target\",\n        width: 1000,\n        height: 1000,\n        image: { src: \"right_sock_source\" },\n        data: right_sock,\n      },\n      {\n        id: \"left_sock_source\",\n        width: 297,\n        height: 974,\n        image: {\n          x: -293,\n          y: -1,\n          width: 590,\n          height: 975,\n        },\n      },\n      {\n        id: \"left_sock_target_01\",\n        width: 287,\n        height: 940,\n        image: {\n          x: -10,\n          y: -34,\n          width: 297,\n          height: 974,\n          src: \"left_sock_source\",\n        },\n        data: left_sock_01,\n      },\n      {\n        id: \"left_sock_target_02\",\n        width: 1000,\n        height: 1000,\n        image: { src: \"left_sock_target_01\" },\n        data: left_sock_02,\n      },\n    ]\n\n    let prev\n    this.meshables = []\n\n    this.dummies = canvas_data.map((obj, i) => {\n      const dummy = new CanvasDummy()\n      obj.image = obj.image || {}\n      if (obj.image.src) {\n      } else {\n      }\n\n      const addMesh = obj.image.src || false\n      obj.image.src = addMesh ? prev : src\n\n      if (addMesh) obj.mesh = addMesh\n\n      dummy.init(obj)\n\n      if (obj.image.src === prev) {\n        this.meshables.push(dummy)\n      }\n\n      prev = dummy.meshCanvas ? dummy.meshCanvas.output : dummy.canvas\n\n      return dummy\n    })\n\n    // throw new Error(\"STOP\")\n  }\n\n  refresh(img) {\n    const non_meshy = this.dummies.filter(dummy => {\n      return !dummy.meshCanvas\n    })\n\n    non_meshy.forEach((dummy, i) => {\n      dummy.values[0] = img\n      dummy.refresh(true)\n    })\n\n    this.meshables.forEach((dummy, i) => {\n      dummy.refresh(true)\n    })\n  }\n}\n\nexport default new CanvasDummyBuilder()\n","export default __webpack_public_path__ + \"static/media/version1.802c5849.jpg\";","export default __webpack_public_path__ + \"static/media/version2.293b01df.jpg\";","export default __webpack_public_path__ + \"static/media/version3.5c9a8750.jpg\";","export default __webpack_public_path__ + \"static/media/version4.1b8b92a7.jpg\";","export default __webpack_public_path__ + \"static/media/version5.4c4fb797.jpg\";","export default __webpack_public_path__ + \"static/media/version6.f52aac51.jpg\";","export default __webpack_public_path__ + \"static/media/version7.d79f6829.jpg\";","export default __webpack_public_path__ + \"static/media/version8.31dacfa6.jpg\";","import React, { useEffect, useRef, useState } from \"react\"\n\nimport \"./style.scss\"\n\nimport img1 from \"../../assets/comps/version1.jpg\"\nimport img2 from \"../../assets/comps/version2.jpg\"\nimport img3 from \"../../assets/comps/version3.jpg\"\nimport img4 from \"../../assets/comps/version4.jpg\"\nimport img5 from \"../../assets/comps/version5.jpg\"\nimport img6 from \"../../assets/comps/version6.jpg\"\nimport img7 from \"../../assets/comps/version7.jpg\"\nimport img8 from \"../../assets/comps/version8.jpg\"\n\nconst Comps = React.forwardRef((props, ref) => {\n  const images = [img1, img2, img3, img4, img5, img6, img7, img8]\n\n  const [compIndex, setCompIndex] = useState(0)\n  const [hoverIndex, setHoverIndex] = useState(null)\n\n  function getIndex() {\n    return hoverIndex !== null ? hoverIndex + 1 : compIndex + 1\n  }\n\n  return (\n    <div className=\"comp-container\">\n      <div className=\"comp-preview\">\n        <div className=\"preview-holder\">\n          <img alt=\"preview_1\" src={images[compIndex]} />\n          {hoverIndex !== null ? <img alt=\"preview_2\" src={images[hoverIndex]} /> : null}\n          <p>{`Version ${getIndex()}${getIndex() === 1 || getIndex() === 5 ? \" (from PSD)\" : \"\"}`}</p>\n        </div>\n      </div>\n      <div className=\"comp-samples\">\n        {images.map((src, i) => {\n          return (\n            <div>\n              <p>{`preview ${i + 1}`}</p>\n\n              <img\n                className={i === compIndex ? \"comp-selected\" : \"\"}\n                src={src}\n                key={`${src}_${i}`}\n                alt={`thumbnail${i}`}\n                onMouseOver={() => {\n                  if (i !== compIndex) setHoverIndex(i)\n                }}\n                onMouseOut={() => {\n                  if (i !== compIndex) setHoverIndex(null)\n                }}\n                onClick={() => {\n                  setCompIndex(i)\n                  setHoverIndex(null)\n                }}\n              />\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n})\n\nexport default Comps\n","import React, { useEffect, useRef, useState, useReducer } from \"react\"\nimport { Router, Route, Switch, withRouter } from \"react-router-dom\"\nimport history from \"./history.js\"\n\nimport Builder from \"./components/Builder\"\nimport Preview from \"./components/Preview\"\nimport Gridder from \"./components/Gridder\"\nimport Comps from \"./components/Comps\"\n\nimport CanvasDummyBuilder from \"./lib/CanvasDummyBuilder\"\n\nimport \"./App.scss\"\n// import GridManager from \"./lib/GridManager\"\n\nexport const Actions = {\n  MOUSE_DOWN: \"mousedown\",\n  MOUSE_UP: \"mouseup\",\n  MOUSE_MOVE: \"mousemove\",\n}\n\n/*\n\nMAIN COMP:\n  Comp: 1000x1000\n  Guide: 1200x1200\n\n\nRIGHT SOCK:\n  Canvas 1 (lives on main comp):\n    294x971\n      Bitmap Data Drawn into Canvas:\n        x: -4, y: -2\n        590x975\n\n\n\n\n\n\nLEFT SOCK:\n  Canvas 1 (initial warping used in Canvas 2):\n    297x974\n      Bitmap Data Drawn into Canvas:\n        x: -293 (Align.RIGHT), y: -1\n        590x975\n      Guide:\n        487x1140\n  Canvas 2 (lives on main comp, warps Canvas 1):\n    287x940\n\n\n\n\n\n\n*/\n\nexport default function App() {\n  // const [bodyRef, setBody] = useState()\n\n  // const dotIndexRef = useRef()\n  // const boundingRect = useRef()\n  // const mouseDownPos = useRef()\n  // const iterationsRef = useRef()\n  // const [forceUpdate, setForceUpdate] = useState()\n\n  // const assets = [\n  //   // require(\"./assets/textures/asset_01a.jpg\").default,\n  //   require(\"./assets/textures/asset_01.jpg\").default,\n  //   require(\"./assets/textures/asset_02.jpg\").default,\n  //   require(\"./assets/textures/asset_03.jpg\").default,\n  //   require(\"./assets/textures/asset_04.jpg\").default,\n  //   require(\"./assets/textures/asset_bp2.jpg\").default,\n  //   require(\"./assets/textures/asset_looney2.jpg\").default,\n  //   require(\"./assets/textures/asset_tmnt2.jpg\").default,\n  // ]\n  // const assetData = useRef([])\n\n  // const layers = [\n  //   require(\"./assets/layers/layer_03_base.png\").default,\n  //   require(\"./assets/layers/layer_01.png\").default,\n  //   require(\"./assets/layers/layer_02_multiply.png\").default,\n  //   require(\"./assets/layers/layer_03_base_02.png\").default,\n  //   require(\"./assets/layers/sock_mask_left.png\").default,\n  //   require(\"./assets/layers/sock_mask_right.png\").default,\n  // ]\n  // const layerData = useRef([])\n\n  // // const whatever = useRef()\n\n  // const [sourceBitmapData, setSourceBitmapData] = useState()\n\n  // const canvasHolder = useRef()\n\n  // const gridTarget = useRef()\n\n  // ////////////////////////////////////////////////////////////\n\n  // function handleMouseEvent(event, index, dummyIndex, parent, iterations) {\n  //   event.preventDefault()\n  //   event.stopPropagation()\n  //   switch (event.type) {\n  //     case Actions.MOUSE_DOWN:\n  //       bodyRef.addEventListener(Actions.MOUSE_MOVE, handleMouseEvent, false)\n  //       bodyRef.addEventListener(Actions.MOUSE_UP, handleMouseEvent, false)\n  //       gridTarget.current = dummyIndex\n  //       dotIndexRef.current = index\n  //       boundingRect.current = parent.getBoundingClientRect()\n  //       iterationsRef.current = iterations\n\n  //       mouseDownPos.current = {\n  //         x: event.pageX,\n  //         y: event.pageY,\n  //       }\n\n  //       break\n  //     case Actions.MOUSE_UP:\n  //       bodyRef.removeEventListener(Actions.MOUSE_MOVE, handleMouseEvent, false)\n  //       bodyRef.removeEventListener(Actions.MOUSE_UP, handleMouseEvent, false)\n  //       gridTarget.current = null\n  //       dotIndexRef.current = null\n  //       boundingRect.current = null\n  //       mouseDownPos.current = null\n  //       break\n  //     case Actions.MOUSE_MOVE:\n  //       const targetMeshable = CanvasDummyBuilder.meshables[gridTarget.current]\n\n  //       // Infinity means move everything as a large group\n  //       if (dotIndexRef.current === Infinity) {\n  //         // targetMeshable.meshCanvas.gridManager.positions.forEach((coord, i) => {\n  //         //   // console.log(i, targetMeshable.updateDot)\n  //         //   targetMeshable.updateDot(\n  //         //     i,\n  //         //     coord.x - (mouseDownPos.current.x - event.pageX),\n  //         //     coord.y - (mouseDownPos.current.y - event.pageY),\n  //         //     iterations\n  //         //   )\n  //         // })\n  //         mouseDownPos.current = {\n  //           x: event.pageX,\n  //           y: event.pageY,\n  //         }\n  //       } else {\n  //         targetMeshable.updateDot(\n  //           dotIndexRef.current,\n  //           event.pageX - boundingRect.current.x,\n  //           event.pageY - boundingRect.current.y - document.documentElement.scrollTop,\n  //           iterationsRef.current\n  //         )\n  //       }\n\n  //       setForceUpdate(Math.random())\n  //       break\n  //     default:\n  //       break\n  //   }\n  // }\n\n  // useEffect(() => {\n  //   if (!bodyRef) {\n  //     setBody(document.getElementsByTagName(\"body\")[0])\n  //   }\n  // }, [bodyRef])\n\n  // ////////////////////////////////////////////////////////////\n  // useEffect(() => {\n  //   if (!sourceBitmapData) {\n  //     let completed = 0\n  //     function callback() {\n  //       if (++completed === assets.length + layers.length) {\n  //         const img = assetData.current[0]\n\n  //         // setTimeout(() => {\n  //         setSourceBitmapData(img)\n  //         // }, 1000)\n  //         CanvasDummyBuilder.init(img)\n  //       }\n  //     }\n\n  //     assets.forEach((url, i) => {\n  //       const img = new Image()\n  //       img.src = url\n\n  //       img.onload = () => {\n  //         assetData.current[i] = img\n  //         callback()\n  //       }\n  //     })\n  //     layers.forEach((url, i) => {\n  //       const img = new Image()\n  //       img.src = url\n\n  //       img.onload = () => {\n  //         layerData.current[i] = img\n  //         callback()\n  //       }\n  //     })\n  //   }\n  // }, [sourceBitmapData])\n\n  // if (!sourceBitmapData) return <div className=\"loading\">LOADING!</div>\n\n  return (\n    // <Router history={history}>\n    //   <Switch>\n    //     <Route\n    //       path=\"/grid\"\n    //       // path=\"/\"\n    //       render={props => <Gridder />}\n    //     />\n    //     <Route\n    //       path=\"/admin\"\n    //       // path=\"/\"\n    //       render={props => {\n    //         return <Builder sourceBitmapData={sourceBitmapData} dispatch={handleMouseEvent} forceUpdate={forceUpdate} />\n    //       }}\n    //     />\n    //     <Route path=\"\" render={props => <Preview thumbs={assetData.current} layers={layerData.current} />} />\n    //   </Switch>\n    // </Router>\n    <Comps />\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\n// ReactDOM.render(\n// \t<React.StrictMode>\n// \t\t<App />\n// \t</React.StrictMode>,\n// \tdocument.getElementById('root')\n// )\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}